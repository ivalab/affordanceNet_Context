+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-05_13-15-49
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-05_13-15-49
+ /usr/bin/python ./tools/train_net.py --gpu 0 --solver models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt --weights data/imagenet_models/VGG16.v2.caffemodel --imdb voc_2012_train --iters 2000000 --cfg experiments/cfgs/faster_rcnn_end2end.yml
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', gpu_id=0, imdb_name='voc_2012_train', max_iters=2000000, pretrained_model='data/imagenet_models/VGG16.v2.caffemodel', randomize=False, set_cfgs=None, solver='models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt')
Using config:
{'BBOX_XFORM_CLIP': 4.135166556742356,
 'DATA_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/models/coco',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RNG_SEED': 7,
 'ROOT_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net',
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MASK_REG': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False,
          'TEST_INSTANCE': True},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 48,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CLASS_NUM': 7,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'KLdivergence': True,
           'MASK_REG': True,
           'MASK_SIZE': 244,
           'MAX_SIZE': 1000,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'TRAINING_DATA': 'VOC_2012_train',
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
Loaded dataset `voc_2012_train` for training
Set proposal method: gt
Appending horizontally-flipped training examples...
voc_2012_train gt roidb loaded from /home/fujenchu/projects/affordanceContext/affordance-net/data/cache/voc_2012_train_gt_roidb.pkl
done
Preparing training data...
done
29646 roidb entries
Output will be saved to `/home/fujenchu/projects/affordanceContext/affordance-net/output/faster_rcnn_end2end/voc_2012_train`
Filtered 0 roidb entries: 29646 -> 29646
cfg.TRAIN.BBOX_REG = True
Computing bounding-box regression targets...
bbox target means:
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[0. 0. 0. 0.]
bbox target stdevs:
[[0.1 0.1 0.2 0.2]
 [0.1 0.1 0.2 0.2]]
[0.1 0.1 0.2 0.2]
Normalizing targets
done
WARNING: Logging before InitGoogleLogging() is written to STDERR
I0605 13:16:00.200461  1503 solver.cpp:48] Initializing solver from parameters: 
train_net: "models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt"
base_lr: 0.001
display: 20
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 49370
snapshot: 0
snapshot_prefix: "vgg16_faster_rcnn"
average_loss: 100
iter_size: 2
I0605 13:16:00.200485  1503 solver.cpp:81] Creating training net from train_net file: models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt
I0605 13:16:00.202320  1503 net.cpp:49] Initializing net from parameters: 
name: "VGG_ILSVRC_16_layers"
state {
  phase: TRAIN
}
layer {
  name: "input-data"
  type: "Python"
  top: "data"
  top: "im_info"
  top: "gt_boxes"
  top: "seg_mask_inds"
  top: "flipped"
  python_param {
    module: "roi_data_layer.layer"
    layer: "RoIDataLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 30
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 60
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_cls_score_reshape"
  type: "Reshape"
  bottom: "rpn_cls_score"
  top: "rpn_cls_score_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 2
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "rpn-data"
  type: "Python"
  bottom: "rpn_cls_score"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "data"
  top: "rpn_labels"
  top: "rpn_bbox_targets"
  top: "rpn_bbox_inside_weights"
  top: "rpn_bbox_outside_weights"
  python_param {
    module: "rpn.anchor_target_layer"
    layer: "AnchorTargetLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  top: "rpn_cls_loss"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: "rpn_bbox_inside_weights"
  bottom: "rpn_bbox_outside_weights"
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param {
    sigma: 3
  }
}
layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: "rpn_cls_prob_reshape"
  type: "Reshape"
  bottom: "rpn_cls_prob"
  top: "rpn_cls_prob_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 30
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "proposal"
  type: "Python"
  bottom: "rpn_cls_prob_reshape"
  bottom: "rpn_bbox_pred"
  bottom: "im_info"
  top: "rpn_rois"
  python_param {
    module: "rpn.proposal_layer"
    layer: "ProposalLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "roi-data"
  type: "Python"
  bottom: "rpn_rois"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "seg_mask_inds"
  bottom: "flipped"
  top: "rois"
  top: "labels"
  top: "bbox_targets"
  top: "bbox_inside_weights"
  top: "bbox_outside_weights"
  top: "mask_targets"
  top: "rois_pos"
  python_param {
    module: "rpn.proposal_target_layer"
    layer: "ProposalTargetLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "roi_pool5"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  loss_weight: 3
  propagate_down: true
  propagate_down: false
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 2
}
layer {
  name: "roi_pool5_2"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois_pos"
  top: "pool5_2"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "pool5_2_conv"
  type: "Convolution"
  bottom: "pool5_2"
  top: "pool5_2_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv_relu"
  type: "ReLU"
  bottom: "pool5_2_conv"
  top: "pool5_2_conv_relu"
}
layer {
  name: "pool5_2_conv2"
  type: "Convolution"
  bottom: "pool5_2_conv_relu"
  top: "pool5_2_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv2_relu"
  type: "ReLU"
  bottom: "pool5_2_conv2"
  top: "pool5_2_conv2_relu"
}
layer {
  name: "mask_deconv1"
  type: "Deconvolution"
  bottom: "pool5_2_conv2_relu"
  top: "mask_deconv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv3"
  type: "Convolution"
  bottom: "mask_deconv1"
  top: "pool5_2_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv3_relu"
  type: "ReLU"
  bottom: "pool5_2_conv3"
  top: "pool5_2_conv3_relu"
}
layer {
  name: "pool5_2_conv4"
  type: "Convolution"
  bottom: "pool5_2_conv3_relu"
  top: "pool5_2_conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv4_relu"
  type: "ReLU"
  bottom: "pool5_2_conv4"
  top: "pool5_2_conv4_relu"
}
layer {
  name: "query_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "query_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "key_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "key_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "value_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "value_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "query_conv_reshape"
  type: "Reshape"
  bottom: "query_conv"
  top: "query_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 64
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "key_conv_reshape"
  type: "Reshape"
  bottom: "key_conv"
  top: "key_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 64
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "value_conv_reshape"
  type: "Reshape"
  bottom: "value_conv"
  top: "value_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 512
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "query_conv_reshape_perm"
  type: "Permute"
  bottom: "query_conv_reshape"
  top: "query_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 2
    order: 1
  }
}
layer {
  name: "key_conv_reshape_perm"
  type: "Permute"
  bottom: "key_conv_reshape"
  top: "key_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "energy"
  type: "MatrixMultiplication"
  bottom: "query_conv_reshape_perm"
  bottom: "key_conv_reshape_perm"
  top: "energy"
}
layer {
  name: "attention"
  type: "Softmax"
  bottom: "energy"
  top: "attention"
  softmax_param {
    axis: 3
  }
}
layer {
  name: "value_conv_reshape_perm"
  type: "Permute"
  bottom: "value_conv_reshape"
  top: "value_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "attention_perm"
  type: "Permute"
  bottom: "attention"
  top: "attention_perm"
  permute_param {
    order: 0
    order: 1
    order: 2
    order: 3
  }
}
layer {
  name: "out"
  type: "MatrixMultiplication"
  bottom: "value_conv_reshape_perm"
  bottom: "attention_perm"
  top: "out"
}
layer {
  name: "out_reshape"
  type: "Reshape"
  bottom: "out"
  top: "out_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 512
      dim: 30
      dim: 30
    }
  }
}
layer {
  name: "out_reshape_scale"
  type: "Scale"
  bottom: "out_reshape"
  top: "out_reshape_scale"
  param {
    name: "scale_conv1_1"
    lr_mult: 1
  }
  scale_param {
    bias_term: false
  }
}
layer {
  name: "out_x"
  type: "Eltwise"
  bottom: "out_reshape_scale"
  bottom: "pool5_2_conv4_relu"
  top: "out_x"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "query_conv_reshape_ch"
  type: "Reshape"
  bottom: "pool5_2_conv4_relu"
  top: "query_conv_reshape_ch"
  reshape_param {
    shape {
      dim: 1
      dim: 512
      dim: -1
      dim: 1
    }
  }
}
layer {
  name: "key_conv_reshape_ch"
  type: "Reshape"
  bottom: "pool5_2_conv4_relu"
  top: "key_conv_reshape_ch"
  reshape_param {
    shape {
      dim: 1
      dim: 512
      dim: -1
      dim: 1
    }
  }
}
layer {
  name: "value_conv_reshape_ch"
  type: "Reshape"
  bottom: "pool5_2_conv4_relu"
  top: "value_conv_reshape_ch"
  reshape_param {
    shape {
      dim: 1
      dim: 512
      dim: -1
      dim: 1
    }
  }
}
layer {
  name: "query_conv_reshape_perm_ch"
  type: "Permute"
  bottom: "query_conv_reshape_ch"
  top: "query_conv_reshape_perm_ch"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "key_conv_reshape_perm_ch"
  type: "Permute"
  bottom: "key_conv_reshape_ch"
  top: "key_conv_reshape_perm_ch"
  permute_param {
    order: 0
    order: 3
    order: 2
    order: 1
  }
}
layer {
  name: "energy_ch"
  type: "MatrixMultiplication"
  bottom: "query_conv_reshape_perm_ch"
  bottom: "key_conv_reshape_perm_ch"
  top: "energy_ch"
}
layer {
  name: "energy_ch_pool"
  type: "Pooling"
  bottom: "energy_ch"
  top: "energy_ch_pool"
  pooling_param {
    pool: MAX
    kernel_h: 1
    kernel_w: 512
    stride_h: 1
    stride_w: 512
  }
}
layer {
  name: "energy_ch_max"
  type: "Tile"
  bottom: "energy_ch_pool"
  top: "energy_ch_max"
  tile_param {
    axis: 3
    tiles: 512
  }
}
layer {
  name: "energy_ch_minus"
  type: "Power"
  bottom: "energy_ch"
  top: "energy_ch_minus"
  power_param {
    power: 1
    scale: -1
    shift: 0
  }
}
layer {
  name: "energy_new"
  type: "Eltwise"
  bottom: "energy_ch_max"
  bottom: "energy_ch_minus"
  top: "energy_new"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "attention_ch"
  type: "Softmax"
  bottom: "energy_new"
  top: "attention_ch"
  softmax_param {
    axis: 3
  }
}
layer {
  name: "value_conv_reshape_ch_perm"
  type: "Permute"
  bottom: "value_conv_reshape_ch"
  top: "value_conv_reshape_ch_perm"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "attention_ch_perm"
  type: "Permute"
  bottom: "attention_ch"
  top: "attention_ch_perm"
  permute_param {
    order: 0
    order: 1
    order: 2
    order: 3
  }
}
layer {
  name: "out_ch"
  type: "MatrixMultiplication"
  bottom: "attention_ch_perm"
  bottom: "value_conv_reshape_ch_perm"
  top: "out_ch"
}
layer {
  name: "out_ch_reshape"
  type: "Reshape"
  bottom: "out_ch"
  top: "out_ch_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 512
      dim: 30
      dim: 30
    }
  }
}
layer {
  name: "out_ch_reshape_scale"
  type: "Scale"
  bottom: "out_ch_reshape"
  top: "out_ch_reshape_scale"
  param {
    name: "scale_conv1_1"
    lr_mult: 1
  }
  scale_param {
    bias_term: false
  }
}
layer {
  name: "out_ch_x"
  type: "Eltwise"
  bottom: "out_ch_reshape_scale"
  bottom: "pool5_2_conv4_relu"
  top: "out_ch_x"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "out_conv_ch_x"
  type: "Convolution"
  bottom: "out_ch_x"
  top: "out_conv_ch_x"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "out_conv_x"
  type: "Convolution"
  bottom: "out_x"
  top: "out_conv_x"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "out_x_sum"
  type: "Eltwise"
  bottom: "out_conv_x"
  bottom: "out_conv_ch_x"
  top: "out_x_sum"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "mask_deconv2"
  type: "Deconvolution"
  bottom: "out_x_sum"
  top: "mask_deconv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv5"
  type: "Convolution"
  bottom: "mask_deconv2"
  top: "pool5_2_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv5_relu"
  type: "ReLU"
  bottom: "pool5_2_conv5"
  top: "pool5_2_conv5_relu"
}
layer {
  name: "pool5_2_conv6"
  type: "Convolution"
  bottom: "pool5_2_conv5_relu"
  top: "pool5_2_conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv6_relu"
  type: "ReLU"
  bottom: "pool5_2_conv6"
  top: "pool5_2_conv6_relu"
}
layer {
  name: "mask_deconv3"
  type: "Deconvolution"
  bottom: "pool5_2_conv6_relu"
  top: "mask_deconv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    group: 256
    stride: 2
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "mask_score"
  type: "Convolution"
  bottom: "mask_deconv3"
  top: "mask_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_mask"
  type: "SoftmaxWithLoss"
  bottom: "mask_score"
  bottom: "mask_targets"
  top: "loss_mask"
  loss_weight: 3
  propagate_down: true
  propagate_down: false
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
I0605 13:16:00.202646  1503 layer_factory.hpp:77] Creating layer input-data
I0605 13:16:00.281288  1503 net.cpp:106] Creating Layer input-data
I0605 13:16:00.281303  1503 net.cpp:411] input-data -> data
I0605 13:16:00.281311  1503 net.cpp:411] input-data -> im_info
I0605 13:16:00.281316  1503 net.cpp:411] input-data -> gt_boxes
I0605 13:16:00.281329  1503 net.cpp:411] input-data -> seg_mask_inds
I0605 13:16:00.281332  1503 net.cpp:411] input-data -> flipped
RoiDataLayer: name_to_top: {'gt_boxes': 2, 'data': 0, 'seg_mask_inds': 3, 'im_info': 1, 'flipped': 4}
I0605 13:16:00.372309  1503 net.cpp:150] Setting up input-data
I0605 13:16:00.372339  1503 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0605 13:16:00.372354  1503 net.cpp:157] Top shape: 1 3 (3)
I0605 13:16:00.372359  1503 net.cpp:157] Top shape: 1 4 (4)
I0605 13:16:00.372362  1503 net.cpp:157] Top shape: 1 2 (2)
I0605 13:16:00.372366  1503 net.cpp:157] Top shape: 1 1 (1)
I0605 13:16:00.372370  1503 net.cpp:165] Memory required for data: 7200040
I0605 13:16:00.372375  1503 layer_factory.hpp:77] Creating layer data_input-data_0_split
I0605 13:16:00.372392  1503 net.cpp:106] Creating Layer data_input-data_0_split
I0605 13:16:00.372397  1503 net.cpp:454] data_input-data_0_split <- data
I0605 13:16:00.372403  1503 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_0
I0605 13:16:00.372421  1503 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_1
I0605 13:16:00.372475  1503 net.cpp:150] Setting up data_input-data_0_split
I0605 13:16:00.372489  1503 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0605 13:16:00.372494  1503 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0605 13:16:00.372506  1503 net.cpp:165] Memory required for data: 21600040
I0605 13:16:00.372510  1503 layer_factory.hpp:77] Creating layer im_info_input-data_1_split
I0605 13:16:00.372515  1503 net.cpp:106] Creating Layer im_info_input-data_1_split
I0605 13:16:00.372522  1503 net.cpp:454] im_info_input-data_1_split <- im_info
I0605 13:16:00.372526  1503 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_0
I0605 13:16:00.372531  1503 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_1
I0605 13:16:00.372537  1503 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_2
I0605 13:16:00.372575  1503 net.cpp:150] Setting up im_info_input-data_1_split
I0605 13:16:00.372579  1503 net.cpp:157] Top shape: 1 3 (3)
I0605 13:16:00.372593  1503 net.cpp:157] Top shape: 1 3 (3)
I0605 13:16:00.372597  1503 net.cpp:157] Top shape: 1 3 (3)
I0605 13:16:00.372601  1503 net.cpp:165] Memory required for data: 21600076
I0605 13:16:00.372612  1503 layer_factory.hpp:77] Creating layer gt_boxes_input-data_2_split
I0605 13:16:00.372617  1503 net.cpp:106] Creating Layer gt_boxes_input-data_2_split
I0605 13:16:00.372632  1503 net.cpp:454] gt_boxes_input-data_2_split <- gt_boxes
I0605 13:16:00.372637  1503 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_0
I0605 13:16:00.372642  1503 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_1
I0605 13:16:00.372675  1503 net.cpp:150] Setting up gt_boxes_input-data_2_split
I0605 13:16:00.372680  1503 net.cpp:157] Top shape: 1 4 (4)
I0605 13:16:00.372694  1503 net.cpp:157] Top shape: 1 4 (4)
I0605 13:16:00.372696  1503 net.cpp:165] Memory required for data: 21600108
I0605 13:16:00.372699  1503 layer_factory.hpp:77] Creating layer conv1_1
I0605 13:16:00.372714  1503 net.cpp:106] Creating Layer conv1_1
I0605 13:16:00.372718  1503 net.cpp:454] conv1_1 <- data_input-data_0_split_0
I0605 13:16:00.372725  1503 net.cpp:411] conv1_1 -> conv1_1
I0605 13:16:00.823793  1503 net.cpp:150] Setting up conv1_1
I0605 13:16:00.823823  1503 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0605 13:16:00.823827  1503 net.cpp:165] Memory required for data: 175200108
I0605 13:16:00.823840  1503 layer_factory.hpp:77] Creating layer relu1_1
I0605 13:16:00.823863  1503 net.cpp:106] Creating Layer relu1_1
I0605 13:16:00.823866  1503 net.cpp:454] relu1_1 <- conv1_1
I0605 13:16:00.823870  1503 net.cpp:397] relu1_1 -> conv1_1 (in-place)
I0605 13:16:00.824008  1503 net.cpp:150] Setting up relu1_1
I0605 13:16:00.824015  1503 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0605 13:16:00.824028  1503 net.cpp:165] Memory required for data: 328800108
I0605 13:16:00.824031  1503 layer_factory.hpp:77] Creating layer conv1_2
I0605 13:16:00.824050  1503 net.cpp:106] Creating Layer conv1_2
I0605 13:16:00.824054  1503 net.cpp:454] conv1_2 <- conv1_1
I0605 13:16:00.824059  1503 net.cpp:411] conv1_2 -> conv1_2
I0605 13:16:00.826426  1503 net.cpp:150] Setting up conv1_2
I0605 13:16:00.826437  1503 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0605 13:16:00.826440  1503 net.cpp:165] Memory required for data: 482400108
I0605 13:16:00.826458  1503 layer_factory.hpp:77] Creating layer relu1_2
I0605 13:16:00.826464  1503 net.cpp:106] Creating Layer relu1_2
I0605 13:16:00.826468  1503 net.cpp:454] relu1_2 <- conv1_2
I0605 13:16:00.826472  1503 net.cpp:397] relu1_2 -> conv1_2 (in-place)
I0605 13:16:00.826586  1503 net.cpp:150] Setting up relu1_2
I0605 13:16:00.826592  1503 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0605 13:16:00.826604  1503 net.cpp:165] Memory required for data: 636000108
I0605 13:16:00.826607  1503 layer_factory.hpp:77] Creating layer pool1
I0605 13:16:00.826614  1503 net.cpp:106] Creating Layer pool1
I0605 13:16:00.826617  1503 net.cpp:454] pool1 <- conv1_2
I0605 13:16:00.826623  1503 net.cpp:411] pool1 -> pool1
I0605 13:16:00.826670  1503 net.cpp:150] Setting up pool1
I0605 13:16:00.826674  1503 net.cpp:157] Top shape: 1 64 300 500 (9600000)
I0605 13:16:00.826676  1503 net.cpp:165] Memory required for data: 674400108
I0605 13:16:00.826689  1503 layer_factory.hpp:77] Creating layer conv2_1
I0605 13:16:00.826694  1503 net.cpp:106] Creating Layer conv2_1
I0605 13:16:00.826697  1503 net.cpp:454] conv2_1 <- pool1
I0605 13:16:00.826701  1503 net.cpp:411] conv2_1 -> conv2_1
I0605 13:16:00.828548  1503 net.cpp:150] Setting up conv2_1
I0605 13:16:00.828558  1503 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0605 13:16:00.828572  1503 net.cpp:165] Memory required for data: 751200108
I0605 13:16:00.828578  1503 layer_factory.hpp:77] Creating layer relu2_1
I0605 13:16:00.828584  1503 net.cpp:106] Creating Layer relu2_1
I0605 13:16:00.828590  1503 net.cpp:454] relu2_1 <- conv2_1
I0605 13:16:00.828596  1503 net.cpp:397] relu2_1 -> conv2_1 (in-place)
I0605 13:16:00.829071  1503 net.cpp:150] Setting up relu2_1
I0605 13:16:00.829079  1503 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0605 13:16:00.829092  1503 net.cpp:165] Memory required for data: 828000108
I0605 13:16:00.829094  1503 layer_factory.hpp:77] Creating layer conv2_2
I0605 13:16:00.829104  1503 net.cpp:106] Creating Layer conv2_2
I0605 13:16:00.829108  1503 net.cpp:454] conv2_2 <- conv2_1
I0605 13:16:00.829123  1503 net.cpp:411] conv2_2 -> conv2_2
I0605 13:16:00.830451  1503 net.cpp:150] Setting up conv2_2
I0605 13:16:00.830461  1503 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0605 13:16:00.830473  1503 net.cpp:165] Memory required for data: 904800108
I0605 13:16:00.830478  1503 layer_factory.hpp:77] Creating layer relu2_2
I0605 13:16:00.830485  1503 net.cpp:106] Creating Layer relu2_2
I0605 13:16:00.830493  1503 net.cpp:454] relu2_2 <- conv2_2
I0605 13:16:00.830497  1503 net.cpp:397] relu2_2 -> conv2_2 (in-place)
I0605 13:16:00.830613  1503 net.cpp:150] Setting up relu2_2
I0605 13:16:00.830619  1503 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0605 13:16:00.830631  1503 net.cpp:165] Memory required for data: 981600108
I0605 13:16:00.830634  1503 layer_factory.hpp:77] Creating layer pool2
I0605 13:16:00.830638  1503 net.cpp:106] Creating Layer pool2
I0605 13:16:00.830641  1503 net.cpp:454] pool2 <- conv2_2
I0605 13:16:00.830646  1503 net.cpp:411] pool2 -> pool2
I0605 13:16:00.830682  1503 net.cpp:150] Setting up pool2
I0605 13:16:00.830685  1503 net.cpp:157] Top shape: 1 128 150 250 (4800000)
I0605 13:16:00.830687  1503 net.cpp:165] Memory required for data: 1000800108
I0605 13:16:00.830699  1503 layer_factory.hpp:77] Creating layer conv3_1
I0605 13:16:00.830704  1503 net.cpp:106] Creating Layer conv3_1
I0605 13:16:00.830706  1503 net.cpp:454] conv3_1 <- pool2
I0605 13:16:00.830711  1503 net.cpp:411] conv3_1 -> conv3_1
I0605 13:16:00.832465  1503 net.cpp:150] Setting up conv3_1
I0605 13:16:00.832474  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.832487  1503 net.cpp:165] Memory required for data: 1039200108
I0605 13:16:00.832494  1503 layer_factory.hpp:77] Creating layer relu3_1
I0605 13:16:00.832500  1503 net.cpp:106] Creating Layer relu3_1
I0605 13:16:00.832504  1503 net.cpp:454] relu3_1 <- conv3_1
I0605 13:16:00.832509  1503 net.cpp:397] relu3_1 -> conv3_1 (in-place)
I0605 13:16:00.832628  1503 net.cpp:150] Setting up relu3_1
I0605 13:16:00.832633  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.832645  1503 net.cpp:165] Memory required for data: 1077600108
I0605 13:16:00.832648  1503 layer_factory.hpp:77] Creating layer conv3_2
I0605 13:16:00.832657  1503 net.cpp:106] Creating Layer conv3_2
I0605 13:16:00.832661  1503 net.cpp:454] conv3_2 <- conv3_1
I0605 13:16:00.832675  1503 net.cpp:411] conv3_2 -> conv3_2
I0605 13:16:00.834760  1503 net.cpp:150] Setting up conv3_2
I0605 13:16:00.834780  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.834782  1503 net.cpp:165] Memory required for data: 1116000108
I0605 13:16:00.834789  1503 layer_factory.hpp:77] Creating layer relu3_2
I0605 13:16:00.834792  1503 net.cpp:106] Creating Layer relu3_2
I0605 13:16:00.834795  1503 net.cpp:454] relu3_2 <- conv3_2
I0605 13:16:00.834800  1503 net.cpp:397] relu3_2 -> conv3_2 (in-place)
I0605 13:16:00.834918  1503 net.cpp:150] Setting up relu3_2
I0605 13:16:00.834923  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.834935  1503 net.cpp:165] Memory required for data: 1154400108
I0605 13:16:00.834939  1503 layer_factory.hpp:77] Creating layer conv3_3
I0605 13:16:00.834944  1503 net.cpp:106] Creating Layer conv3_3
I0605 13:16:00.834946  1503 net.cpp:454] conv3_3 <- conv3_2
I0605 13:16:00.834950  1503 net.cpp:411] conv3_3 -> conv3_3
I0605 13:16:00.836901  1503 net.cpp:150] Setting up conv3_3
I0605 13:16:00.836910  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.836921  1503 net.cpp:165] Memory required for data: 1192800108
I0605 13:16:00.836927  1503 layer_factory.hpp:77] Creating layer relu3_3
I0605 13:16:00.836935  1503 net.cpp:106] Creating Layer relu3_3
I0605 13:16:00.836937  1503 net.cpp:454] relu3_3 <- conv3_3
I0605 13:16:00.836942  1503 net.cpp:397] relu3_3 -> conv3_3 (in-place)
I0605 13:16:00.837059  1503 net.cpp:150] Setting up relu3_3
I0605 13:16:00.837064  1503 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0605 13:16:00.837076  1503 net.cpp:165] Memory required for data: 1231200108
I0605 13:16:00.837079  1503 layer_factory.hpp:77] Creating layer pool3
I0605 13:16:00.837085  1503 net.cpp:106] Creating Layer pool3
I0605 13:16:00.837090  1503 net.cpp:454] pool3 <- conv3_3
I0605 13:16:00.837095  1503 net.cpp:411] pool3 -> pool3
I0605 13:16:00.837134  1503 net.cpp:150] Setting up pool3
I0605 13:16:00.837138  1503 net.cpp:157] Top shape: 1 256 75 125 (2400000)
I0605 13:16:00.837141  1503 net.cpp:165] Memory required for data: 1240800108
I0605 13:16:00.837152  1503 layer_factory.hpp:77] Creating layer conv4_1
I0605 13:16:00.837157  1503 net.cpp:106] Creating Layer conv4_1
I0605 13:16:00.837162  1503 net.cpp:454] conv4_1 <- pool3
I0605 13:16:00.837165  1503 net.cpp:411] conv4_1 -> conv4_1
I0605 13:16:00.840889  1503 net.cpp:150] Setting up conv4_1
I0605 13:16:00.840916  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.840919  1503 net.cpp:165] Memory required for data: 1260000108
I0605 13:16:00.840929  1503 layer_factory.hpp:77] Creating layer relu4_1
I0605 13:16:00.840950  1503 net.cpp:106] Creating Layer relu4_1
I0605 13:16:00.840956  1503 net.cpp:454] relu4_1 <- conv4_1
I0605 13:16:00.840965  1503 net.cpp:397] relu4_1 -> conv4_1 (in-place)
I0605 13:16:00.841099  1503 net.cpp:150] Setting up relu4_1
I0605 13:16:00.841105  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.841117  1503 net.cpp:165] Memory required for data: 1279200108
I0605 13:16:00.841120  1503 layer_factory.hpp:77] Creating layer conv4_2
I0605 13:16:00.841138  1503 net.cpp:106] Creating Layer conv4_2
I0605 13:16:00.841143  1503 net.cpp:454] conv4_2 <- conv4_1
I0605 13:16:00.841148  1503 net.cpp:411] conv4_2 -> conv4_2
I0605 13:16:00.846021  1503 net.cpp:150] Setting up conv4_2
I0605 13:16:00.846040  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.846060  1503 net.cpp:165] Memory required for data: 1298400108
I0605 13:16:00.846073  1503 layer_factory.hpp:77] Creating layer relu4_2
I0605 13:16:00.846096  1503 net.cpp:106] Creating Layer relu4_2
I0605 13:16:00.846101  1503 net.cpp:454] relu4_2 <- conv4_2
I0605 13:16:00.846118  1503 net.cpp:397] relu4_2 -> conv4_2 (in-place)
I0605 13:16:00.846590  1503 net.cpp:150] Setting up relu4_2
I0605 13:16:00.846597  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.846601  1503 net.cpp:165] Memory required for data: 1317600108
I0605 13:16:00.846602  1503 layer_factory.hpp:77] Creating layer conv4_3
I0605 13:16:00.846609  1503 net.cpp:106] Creating Layer conv4_3
I0605 13:16:00.846611  1503 net.cpp:454] conv4_3 <- conv4_2
I0605 13:16:00.846616  1503 net.cpp:411] conv4_3 -> conv4_3
I0605 13:16:00.850749  1503 net.cpp:150] Setting up conv4_3
I0605 13:16:00.850767  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.850770  1503 net.cpp:165] Memory required for data: 1336800108
I0605 13:16:00.850777  1503 layer_factory.hpp:77] Creating layer relu4_3
I0605 13:16:00.850785  1503 net.cpp:106] Creating Layer relu4_3
I0605 13:16:00.850790  1503 net.cpp:454] relu4_3 <- conv4_3
I0605 13:16:00.850795  1503 net.cpp:397] relu4_3 -> conv4_3 (in-place)
I0605 13:16:00.850920  1503 net.cpp:150] Setting up relu4_3
I0605 13:16:00.850925  1503 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0605 13:16:00.850929  1503 net.cpp:165] Memory required for data: 1356000108
I0605 13:16:00.850930  1503 layer_factory.hpp:77] Creating layer pool4
I0605 13:16:00.850935  1503 net.cpp:106] Creating Layer pool4
I0605 13:16:00.850939  1503 net.cpp:454] pool4 <- conv4_3
I0605 13:16:00.850942  1503 net.cpp:411] pool4 -> pool4
I0605 13:16:00.850991  1503 net.cpp:150] Setting up pool4
I0605 13:16:00.850996  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.850997  1503 net.cpp:165] Memory required for data: 1360903020
I0605 13:16:00.851011  1503 layer_factory.hpp:77] Creating layer conv5_1
I0605 13:16:00.851016  1503 net.cpp:106] Creating Layer conv5_1
I0605 13:16:00.851019  1503 net.cpp:454] conv5_1 <- pool4
I0605 13:16:00.851024  1503 net.cpp:411] conv5_1 -> conv5_1
I0605 13:16:00.855157  1503 net.cpp:150] Setting up conv5_1
I0605 13:16:00.855176  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.855180  1503 net.cpp:165] Memory required for data: 1365805932
I0605 13:16:00.855186  1503 layer_factory.hpp:77] Creating layer relu5_1
I0605 13:16:00.855195  1503 net.cpp:106] Creating Layer relu5_1
I0605 13:16:00.855198  1503 net.cpp:454] relu5_1 <- conv5_1
I0605 13:16:00.855206  1503 net.cpp:397] relu5_1 -> conv5_1 (in-place)
I0605 13:16:00.855332  1503 net.cpp:150] Setting up relu5_1
I0605 13:16:00.855338  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.855340  1503 net.cpp:165] Memory required for data: 1370708844
I0605 13:16:00.855343  1503 layer_factory.hpp:77] Creating layer conv5_2
I0605 13:16:00.855350  1503 net.cpp:106] Creating Layer conv5_2
I0605 13:16:00.855352  1503 net.cpp:454] conv5_2 <- conv5_1
I0605 13:16:00.855356  1503 net.cpp:411] conv5_2 -> conv5_2
I0605 13:16:00.859511  1503 net.cpp:150] Setting up conv5_2
I0605 13:16:00.859531  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.859534  1503 net.cpp:165] Memory required for data: 1375611756
I0605 13:16:00.859541  1503 layer_factory.hpp:77] Creating layer relu5_2
I0605 13:16:00.859549  1503 net.cpp:106] Creating Layer relu5_2
I0605 13:16:00.859552  1503 net.cpp:454] relu5_2 <- conv5_2
I0605 13:16:00.859558  1503 net.cpp:397] relu5_2 -> conv5_2 (in-place)
I0605 13:16:00.859668  1503 net.cpp:150] Setting up relu5_2
I0605 13:16:00.859673  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.859676  1503 net.cpp:165] Memory required for data: 1380514668
I0605 13:16:00.859678  1503 layer_factory.hpp:77] Creating layer conv5_3
I0605 13:16:00.859688  1503 net.cpp:106] Creating Layer conv5_3
I0605 13:16:00.859690  1503 net.cpp:454] conv5_3 <- conv5_2
I0605 13:16:00.859695  1503 net.cpp:411] conv5_3 -> conv5_3
I0605 13:16:00.863821  1503 net.cpp:150] Setting up conv5_3
I0605 13:16:00.863842  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.863844  1503 net.cpp:165] Memory required for data: 1385417580
I0605 13:16:00.863852  1503 layer_factory.hpp:77] Creating layer relu5_3
I0605 13:16:00.863858  1503 net.cpp:106] Creating Layer relu5_3
I0605 13:16:00.863862  1503 net.cpp:454] relu5_3 <- conv5_3
I0605 13:16:00.863868  1503 net.cpp:397] relu5_3 -> conv5_3 (in-place)
I0605 13:16:00.863978  1503 net.cpp:150] Setting up relu5_3
I0605 13:16:00.863984  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.863986  1503 net.cpp:165] Memory required for data: 1390320492
I0605 13:16:00.863989  1503 layer_factory.hpp:77] Creating layer conv5_3_relu5_3_0_split
I0605 13:16:00.863993  1503 net.cpp:106] Creating Layer conv5_3_relu5_3_0_split
I0605 13:16:00.863996  1503 net.cpp:454] conv5_3_relu5_3_0_split <- conv5_3
I0605 13:16:00.863999  1503 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_0
I0605 13:16:00.864006  1503 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_1
I0605 13:16:00.864010  1503 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_2
I0605 13:16:00.864043  1503 net.cpp:150] Setting up conv5_3_relu5_3_0_split
I0605 13:16:00.864048  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.864049  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.864053  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.864054  1503 net.cpp:165] Memory required for data: 1405029228
I0605 13:16:00.864056  1503 layer_factory.hpp:77] Creating layer rpn_conv/3x3
I0605 13:16:00.864063  1503 net.cpp:106] Creating Layer rpn_conv/3x3
I0605 13:16:00.864066  1503 net.cpp:454] rpn_conv/3x3 <- conv5_3_relu5_3_0_split_0
I0605 13:16:00.864073  1503 net.cpp:411] rpn_conv/3x3 -> rpn/output
I0605 13:16:00.913595  1503 net.cpp:150] Setting up rpn_conv/3x3
I0605 13:16:00.913622  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.913625  1503 net.cpp:165] Memory required for data: 1409932140
I0605 13:16:00.913633  1503 layer_factory.hpp:77] Creating layer rpn_relu/3x3
I0605 13:16:00.913652  1503 net.cpp:106] Creating Layer rpn_relu/3x3
I0605 13:16:00.913659  1503 net.cpp:454] rpn_relu/3x3 <- rpn/output
I0605 13:16:00.913666  1503 net.cpp:397] rpn_relu/3x3 -> rpn/output (in-place)
I0605 13:16:00.913799  1503 net.cpp:150] Setting up rpn_relu/3x3
I0605 13:16:00.913805  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.913817  1503 net.cpp:165] Memory required for data: 1414835052
I0605 13:16:00.913820  1503 layer_factory.hpp:77] Creating layer rpn/output_rpn_relu/3x3_0_split
I0605 13:16:00.913825  1503 net.cpp:106] Creating Layer rpn/output_rpn_relu/3x3_0_split
I0605 13:16:00.913828  1503 net.cpp:454] rpn/output_rpn_relu/3x3_0_split <- rpn/output
I0605 13:16:00.913843  1503 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_0
I0605 13:16:00.913851  1503 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_1
I0605 13:16:00.913887  1503 net.cpp:150] Setting up rpn/output_rpn_relu/3x3_0_split
I0605 13:16:00.913890  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.913904  1503 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0605 13:16:00.913908  1503 net.cpp:165] Memory required for data: 1424640876
I0605 13:16:00.913909  1503 layer_factory.hpp:77] Creating layer rpn_cls_score
I0605 13:16:00.913926  1503 net.cpp:106] Creating Layer rpn_cls_score
I0605 13:16:00.913929  1503 net.cpp:454] rpn_cls_score <- rpn/output_rpn_relu/3x3_0_split_0
I0605 13:16:00.913944  1503 net.cpp:411] rpn_cls_score -> rpn_cls_score
I0605 13:16:00.915483  1503 net.cpp:150] Setting up rpn_cls_score
I0605 13:16:00.915491  1503 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0605 13:16:00.915504  1503 net.cpp:165] Memory required for data: 1424928156
I0605 13:16:00.915508  1503 layer_factory.hpp:77] Creating layer rpn_cls_score_rpn_cls_score_0_split
I0605 13:16:00.915513  1503 net.cpp:106] Creating Layer rpn_cls_score_rpn_cls_score_0_split
I0605 13:16:00.915516  1503 net.cpp:454] rpn_cls_score_rpn_cls_score_0_split <- rpn_cls_score
I0605 13:16:00.915534  1503 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_0
I0605 13:16:00.915542  1503 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_1
I0605 13:16:00.915572  1503 net.cpp:150] Setting up rpn_cls_score_rpn_cls_score_0_split
I0605 13:16:00.915576  1503 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0605 13:16:00.915582  1503 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0605 13:16:00.915596  1503 net.cpp:165] Memory required for data: 1425502716
I0605 13:16:00.915601  1503 layer_factory.hpp:77] Creating layer rpn_bbox_pred
I0605 13:16:00.915621  1503 net.cpp:106] Creating Layer rpn_bbox_pred
I0605 13:16:00.915623  1503 net.cpp:454] rpn_bbox_pred <- rpn/output_rpn_relu/3x3_0_split_1
I0605 13:16:00.915628  1503 net.cpp:411] rpn_bbox_pred -> rpn_bbox_pred
I0605 13:16:00.917090  1503 net.cpp:150] Setting up rpn_bbox_pred
I0605 13:16:00.917099  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.917102  1503 net.cpp:165] Memory required for data: 1426077276
I0605 13:16:00.917121  1503 layer_factory.hpp:77] Creating layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0605 13:16:00.917126  1503 net.cpp:106] Creating Layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0605 13:16:00.917132  1503 net.cpp:454] rpn_bbox_pred_rpn_bbox_pred_0_split <- rpn_bbox_pred
I0605 13:16:00.917140  1503 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0605 13:16:00.917148  1503 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0605 13:16:00.917177  1503 net.cpp:150] Setting up rpn_bbox_pred_rpn_bbox_pred_0_split
I0605 13:16:00.917181  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.917184  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.917188  1503 net.cpp:165] Memory required for data: 1427226396
I0605 13:16:00.917191  1503 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape
I0605 13:16:00.917202  1503 net.cpp:106] Creating Layer rpn_cls_score_reshape
I0605 13:16:00.917207  1503 net.cpp:454] rpn_cls_score_reshape <- rpn_cls_score_rpn_cls_score_0_split_0
I0605 13:16:00.917210  1503 net.cpp:411] rpn_cls_score_reshape -> rpn_cls_score_reshape
I0605 13:16:00.917229  1503 net.cpp:150] Setting up rpn_cls_score_reshape
I0605 13:16:00.917234  1503 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0605 13:16:00.917237  1503 net.cpp:165] Memory required for data: 1427513676
I0605 13:16:00.917238  1503 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0605 13:16:00.917243  1503 net.cpp:106] Creating Layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0605 13:16:00.917246  1503 net.cpp:454] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split <- rpn_cls_score_reshape
I0605 13:16:00.917250  1503 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0605 13:16:00.917258  1503 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0605 13:16:00.917281  1503 net.cpp:150] Setting up rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0605 13:16:00.917285  1503 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0605 13:16:00.917289  1503 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0605 13:16:00.917290  1503 net.cpp:165] Memory required for data: 1428088236
I0605 13:16:00.917294  1503 layer_factory.hpp:77] Creating layer rpn-data
I0605 13:16:00.918205  1503 net.cpp:106] Creating Layer rpn-data
I0605 13:16:00.918215  1503 net.cpp:454] rpn-data <- rpn_cls_score_rpn_cls_score_0_split_1
I0605 13:16:00.918220  1503 net.cpp:454] rpn-data <- gt_boxes_input-data_2_split_0
I0605 13:16:00.918223  1503 net.cpp:454] rpn-data <- im_info_input-data_1_split_0
I0605 13:16:00.918227  1503 net.cpp:454] rpn-data <- data_input-data_0_split_1
I0605 13:16:00.918231  1503 net.cpp:411] rpn-data -> rpn_labels
I0605 13:16:00.918236  1503 net.cpp:411] rpn-data -> rpn_bbox_targets
I0605 13:16:00.918242  1503 net.cpp:411] rpn-data -> rpn_bbox_inside_weights
I0605 13:16:00.918246  1503 net.cpp:411] rpn-data -> rpn_bbox_outside_weights
===================================anchor_scales in AnchorTargetLayer:=============(2, 4, 8, 16, 32)
I0605 13:16:00.919121  1503 net.cpp:150] Setting up rpn-data
I0605 13:16:00.919129  1503 net.cpp:157] Top shape: 1 1 570 63 (35910)
I0605 13:16:00.919133  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.919136  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.919139  1503 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0605 13:16:00.919142  1503 net.cpp:165] Memory required for data: 1429955556
I0605 13:16:00.919144  1503 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0605 13:16:00.919152  1503 net.cpp:106] Creating Layer rpn_loss_cls
I0605 13:16:00.919157  1503 net.cpp:454] rpn_loss_cls <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0605 13:16:00.919160  1503 net.cpp:454] rpn_loss_cls <- rpn_labels
I0605 13:16:00.919164  1503 net.cpp:411] rpn_loss_cls -> rpn_cls_loss
I0605 13:16:00.919175  1503 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0605 13:16:00.919831  1503 net.cpp:150] Setting up rpn_loss_cls
I0605 13:16:00.919840  1503 net.cpp:157] Top shape: (1)
I0605 13:16:00.919843  1503 net.cpp:160]     with loss weight 1
I0605 13:16:00.919862  1503 net.cpp:165] Memory required for data: 1429955560
I0605 13:16:00.919865  1503 layer_factory.hpp:77] Creating layer rpn_loss_bbox
I0605 13:16:00.919873  1503 net.cpp:106] Creating Layer rpn_loss_bbox
I0605 13:16:00.919878  1503 net.cpp:454] rpn_loss_bbox <- rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0605 13:16:00.919881  1503 net.cpp:454] rpn_loss_bbox <- rpn_bbox_targets
I0605 13:16:00.919886  1503 net.cpp:454] rpn_loss_bbox <- rpn_bbox_inside_weights
I0605 13:16:00.919888  1503 net.cpp:454] rpn_loss_bbox <- rpn_bbox_outside_weights
I0605 13:16:00.919894  1503 net.cpp:411] rpn_loss_bbox -> rpn_loss_bbox
I0605 13:16:00.920967  1503 net.cpp:150] Setting up rpn_loss_bbox
I0605 13:16:00.920975  1503 net.cpp:157] Top shape: (1)
I0605 13:16:00.920979  1503 net.cpp:160]     with loss weight 1
I0605 13:16:00.920982  1503 net.cpp:165] Memory required for data: 1429955564
I0605 13:16:00.920986  1503 layer_factory.hpp:77] Creating layer rpn_cls_prob
I0605 13:16:00.920990  1503 net.cpp:106] Creating Layer rpn_cls_prob
I0605 13:16:00.920994  1503 net.cpp:454] rpn_cls_prob <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0605 13:16:00.921000  1503 net.cpp:411] rpn_cls_prob -> rpn_cls_prob
I0605 13:16:00.921155  1503 net.cpp:150] Setting up rpn_cls_prob
I0605 13:16:00.921161  1503 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0605 13:16:00.921164  1503 net.cpp:165] Memory required for data: 1430242844
I0605 13:16:00.921167  1503 layer_factory.hpp:77] Creating layer rpn_cls_prob_reshape
I0605 13:16:00.921175  1503 net.cpp:106] Creating Layer rpn_cls_prob_reshape
I0605 13:16:00.921180  1503 net.cpp:454] rpn_cls_prob_reshape <- rpn_cls_prob
I0605 13:16:00.921183  1503 net.cpp:411] rpn_cls_prob_reshape -> rpn_cls_prob_reshape
I0605 13:16:00.921202  1503 net.cpp:150] Setting up rpn_cls_prob_reshape
I0605 13:16:00.921206  1503 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0605 13:16:00.921208  1503 net.cpp:165] Memory required for data: 1430530124
I0605 13:16:00.921213  1503 layer_factory.hpp:77] Creating layer proposal
I0605 13:16:00.922297  1503 net.cpp:106] Creating Layer proposal
I0605 13:16:00.922305  1503 net.cpp:454] proposal <- rpn_cls_prob_reshape
I0605 13:16:00.922309  1503 net.cpp:454] proposal <- rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0605 13:16:00.922312  1503 net.cpp:454] proposal <- im_info_input-data_1_split_1
I0605 13:16:00.922317  1503 net.cpp:411] proposal -> rpn_rois
=================================anchor_scales in ProposalLayer:=============(2, 4, 8, 16, 32)
I0605 13:16:00.923403  1503 net.cpp:150] Setting up proposal
I0605 13:16:00.923413  1503 net.cpp:157] Top shape: 1 5 (5)
I0605 13:16:00.923424  1503 net.cpp:165] Memory required for data: 1430530144
I0605 13:16:00.923427  1503 layer_factory.hpp:77] Creating layer roi-data
I0605 13:16:00.925808  1503 net.cpp:106] Creating Layer roi-data
I0605 13:16:00.925817  1503 net.cpp:454] roi-data <- rpn_rois
I0605 13:16:00.925820  1503 net.cpp:454] roi-data <- gt_boxes_input-data_2_split_1
I0605 13:16:00.925823  1503 net.cpp:454] roi-data <- im_info_input-data_1_split_2
I0605 13:16:00.925827  1503 net.cpp:454] roi-data <- seg_mask_inds
I0605 13:16:00.925829  1503 net.cpp:454] roi-data <- flipped
I0605 13:16:00.925833  1503 net.cpp:411] roi-data -> rois
I0605 13:16:00.925848  1503 net.cpp:411] roi-data -> labels
I0605 13:16:00.925854  1503 net.cpp:411] roi-data -> bbox_targets
I0605 13:16:00.925869  1503 net.cpp:411] roi-data -> bbox_inside_weights
I0605 13:16:00.925874  1503 net.cpp:411] roi-data -> bbox_outside_weights
I0605 13:16:00.925879  1503 net.cpp:411] roi-data -> mask_targets
I0605 13:16:00.925884  1503 net.cpp:411] roi-data -> rois_pos
Traceback (most recent call last):
  File "./tools/train_net.py", line 116, in <module>
    max_iters=args.max_iters)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 168, in train_net
    pretrained_model=pretrained_model)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 52, in __init__
    self.solver = caffe.SGDSolver(solver_prototxt)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/rpn/proposal_target_layer.py", line 70, in setup
    top[7].reshape(1, 20)
IndexError: Index out of range
