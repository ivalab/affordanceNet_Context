+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-25_16-02-27
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-25_16-02-27
+ /usr/bin/python ./tools/train_net.py --gpu 0 --solver models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt --weights data/imagenet_models/VGG16.v2.caffemodel --imdb voc_2012_train --iters 2000000 --cfg experiments/cfgs/faster_rcnn_end2end.yml
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', gpu_id=0, imdb_name='voc_2012_train', max_iters=2000000, pretrained_model='data/imagenet_models/VGG16.v2.caffemodel', randomize=False, set_cfgs=None, solver='models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt')
Using config:
{'BBOX_XFORM_CLIP': 4.135166556742356,
 'DATA_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/models/coco',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RNG_SEED': 7,
 'ROOT_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net',
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MASK_REG': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False,
          'TEST_INSTANCE': True},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 48,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CLASS_NUM': 7,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'KLdivergence': True,
           'MASK_REG': True,
           'MASK_SIZE': 244,
           'MAX_SIZE': 1000,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'TRAINING_DATA': 'VOC_2012_train',
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
Loaded dataset `voc_2012_train` for training
Set proposal method: gt
Appending horizontally-flipped training examples...
voc_2012_train gt roidb loaded from /home/fujenchu/projects/affordanceContext/affordance-net/data/cache/voc_2012_train_gt_roidb.pkl
done
Preparing training data...
done
41748 roidb entries
Output will be saved to `/home/fujenchu/projects/affordanceContext/affordance-net/output/faster_rcnn_end2end/voc_2012_train`
Filtered 0 roidb entries: 41748 -> 41748
cfg.TRAIN.BBOX_REG = True
Computing bounding-box regression targets...
bbox target means:
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[0. 0. 0. 0.]
bbox target stdevs:
[[0.1 0.1 0.2 0.2]
 [0.1 0.1 0.2 0.2]]
[0.1 0.1 0.2 0.2]
Normalizing targets
done
WARNING: Logging before InitGoogleLogging() is written to STDERR
I0625 16:02:41.420207 26548 solver.cpp:48] Initializing solver from parameters: 
train_net: "models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt"
base_lr: 0.001
display: 20
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 49370
snapshot: 0
snapshot_prefix: "vgg16_faster_rcnn"
average_loss: 100
iter_size: 2
I0625 16:02:41.420243 26548 solver.cpp:81] Creating training net from train_net file: models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt
I0625 16:02:41.421367 26548 net.cpp:49] Initializing net from parameters: 
name: "VGG_ILSVRC_16_layers"
state {
  phase: TRAIN
}
layer {
  name: "input-data"
  type: "Python"
  top: "data"
  top: "im_info"
  top: "gt_boxes"
  top: "seg_mask_inds"
  top: "flipped"
  python_param {
    module: "roi_data_layer.layer"
    layer: "RoIDataLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 30
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 60
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_cls_score_reshape"
  type: "Reshape"
  bottom: "rpn_cls_score"
  top: "rpn_cls_score_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 2
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "rpn-data"
  type: "Python"
  bottom: "rpn_cls_score"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "data"
  top: "rpn_labels"
  top: "rpn_bbox_targets"
  top: "rpn_bbox_inside_weights"
  top: "rpn_bbox_outside_weights"
  python_param {
    module: "rpn.anchor_target_layer"
    layer: "AnchorTargetLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  top: "rpn_cls_loss"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: "rpn_bbox_inside_weights"
  bottom: "rpn_bbox_outside_weights"
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param {
    sigma: 3
  }
}
layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: "rpn_cls_prob_reshape"
  type: "Reshape"
  bottom: "rpn_cls_prob"
  top: "rpn_cls_prob_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 30
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "proposal"
  type: "Python"
  bottom: "rpn_cls_prob_reshape"
  bottom: "rpn_bbox_pred"
  bottom: "im_info"
  top: "rpn_rois"
  python_param {
    module: "rpn.proposal_layer"
    layer: "ProposalLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "roi-data"
  type: "Python"
  bottom: "rpn_rois"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "seg_mask_inds"
  bottom: "flipped"
  top: "rois"
  top: "labels"
  top: "bbox_targets"
  top: "bbox_inside_weights"
  top: "bbox_outside_weights"
  top: "mask_targets"
  top: "rois_pos"
  python_param {
    module: "rpn.proposal_target_layer"
    layer: "ProposalTargetLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "roi_pool5"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  loss_weight: 3
  propagate_down: true
  propagate_down: false
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 2
}
layer {
  name: "roi_pool5_2"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois_pos"
  top: "pool5_2"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "pool5_2_conv"
  type: "Convolution"
  bottom: "pool5_2"
  top: "pool5_2_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv_relu"
  type: "ReLU"
  bottom: "pool5_2_conv"
  top: "pool5_2_conv_relu"
}
layer {
  name: "pool5_2_conv2"
  type: "Convolution"
  bottom: "pool5_2_conv_relu"
  top: "pool5_2_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv2_relu"
  type: "ReLU"
  bottom: "pool5_2_conv2"
  top: "pool5_2_conv2_relu"
}
layer {
  name: "mask_deconv1"
  type: "Deconvolution"
  bottom: "pool5_2_conv2_relu"
  top: "mask_deconv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv3"
  type: "Convolution"
  bottom: "mask_deconv1"
  top: "pool5_2_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv3_relu"
  type: "ReLU"
  bottom: "pool5_2_conv3"
  top: "pool5_2_conv3_relu"
}
layer {
  name: "pool5_2_conv4"
  type: "Convolution"
  bottom: "pool5_2_conv3_relu"
  top: "pool5_2_conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv4_relu"
  type: "ReLU"
  bottom: "pool5_2_conv4"
  top: "pool5_2_conv4_relu"
}
layer {
  name: "mask_deconv2"
  type: "Deconvolution"
  bottom: "pool5_2_conv4_relu"
  top: "mask_deconv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv5"
  type: "Convolution"
  bottom: "mask_deconv2"
  top: "pool5_2_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv5_relu"
  type: "ReLU"
  bottom: "pool5_2_conv5"
  top: "pool5_2_conv5_relu"
}
layer {
  name: "pool5_2_conv6"
  type: "Convolution"
  bottom: "pool5_2_conv5_relu"
  top: "pool5_2_conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv6_relu"
  type: "ReLU"
  bottom: "pool5_2_conv6"
  top: "pool5_2_conv6_relu"
}
layer {
  name: "mask_deconv3"
  type: "Deconvolution"
  bottom: "pool5_2_conv6_relu"
  top: "mask_deconv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    group: 256
    stride: 2
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "mask_score"
  type: "Convolution"
  bottom: "mask_deconv3"
  top: "mask_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "mask_score"
  top: "mask_score_softmax"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "log"
  type: "Log"
  bottom: "mask_score_softmax"
  top: "log"
}
layer {
  name: "mult1"
  type: "Eltwise"
  bottom: "log"
  bottom: "mask_targets"
  top: "mult1"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "cross_entropy"
  type: "Power"
  bottom: "mult1"
  top: "cross_entropy"
  power_param {
    power: 1
    scale: -1
    shift: 0
  }
}
layer {
  name: "ce_sum"
  type: "Convolution"
  bottom: "cross_entropy"
  top: "cross_entropy_sum"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "ce_mean"
  type: "Reduction"
  bottom: "cross_entropy_sum"
  top: "cross_entropy_mean"
  loss_weight: 1
  reduction_param {
    operation: MEAN
    axis: 0
  }
}
I0625 16:02:41.421705 26548 layer_factory.hpp:77] Creating layer input-data
I0625 16:02:41.518313 26548 net.cpp:106] Creating Layer input-data
I0625 16:02:41.518329 26548 net.cpp:411] input-data -> data
I0625 16:02:41.518337 26548 net.cpp:411] input-data -> im_info
I0625 16:02:41.518342 26548 net.cpp:411] input-data -> gt_boxes
I0625 16:02:41.518347 26548 net.cpp:411] input-data -> seg_mask_inds
I0625 16:02:41.518349 26548 net.cpp:411] input-data -> flipped
RoiDataLayer: name_to_top: {'gt_boxes': 2, 'data': 0, 'seg_mask_inds': 3, 'im_info': 1, 'flipped': 4}
I0625 16:02:41.597282 26548 net.cpp:150] Setting up input-data
I0625 16:02:41.597302 26548 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 16:02:41.597307 26548 net.cpp:157] Top shape: 1 3 (3)
I0625 16:02:41.597311 26548 net.cpp:157] Top shape: 1 4 (4)
I0625 16:02:41.597314 26548 net.cpp:157] Top shape: 1 2 (2)
I0625 16:02:41.597318 26548 net.cpp:157] Top shape: 1 1 (1)
I0625 16:02:41.597322 26548 net.cpp:165] Memory required for data: 7200040
I0625 16:02:41.597328 26548 layer_factory.hpp:77] Creating layer data_input-data_0_split
I0625 16:02:41.597344 26548 net.cpp:106] Creating Layer data_input-data_0_split
I0625 16:02:41.597348 26548 net.cpp:454] data_input-data_0_split <- data
I0625 16:02:41.597353 26548 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_0
I0625 16:02:41.597360 26548 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_1
I0625 16:02:41.597389 26548 net.cpp:150] Setting up data_input-data_0_split
I0625 16:02:41.597394 26548 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 16:02:41.597398 26548 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 16:02:41.597398 26548 net.cpp:165] Memory required for data: 21600040
I0625 16:02:41.597400 26548 layer_factory.hpp:77] Creating layer im_info_input-data_1_split
I0625 16:02:41.597406 26548 net.cpp:106] Creating Layer im_info_input-data_1_split
I0625 16:02:41.597409 26548 net.cpp:454] im_info_input-data_1_split <- im_info
I0625 16:02:41.597414 26548 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_0
I0625 16:02:41.597419 26548 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_1
I0625 16:02:41.597425 26548 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_2
I0625 16:02:41.597456 26548 net.cpp:150] Setting up im_info_input-data_1_split
I0625 16:02:41.597461 26548 net.cpp:157] Top shape: 1 3 (3)
I0625 16:02:41.597465 26548 net.cpp:157] Top shape: 1 3 (3)
I0625 16:02:41.597467 26548 net.cpp:157] Top shape: 1 3 (3)
I0625 16:02:41.597470 26548 net.cpp:165] Memory required for data: 21600076
I0625 16:02:41.597471 26548 layer_factory.hpp:77] Creating layer gt_boxes_input-data_2_split
I0625 16:02:41.597474 26548 net.cpp:106] Creating Layer gt_boxes_input-data_2_split
I0625 16:02:41.597478 26548 net.cpp:454] gt_boxes_input-data_2_split <- gt_boxes
I0625 16:02:41.597483 26548 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_0
I0625 16:02:41.597489 26548 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_1
I0625 16:02:41.597514 26548 net.cpp:150] Setting up gt_boxes_input-data_2_split
I0625 16:02:41.597520 26548 net.cpp:157] Top shape: 1 4 (4)
I0625 16:02:41.597524 26548 net.cpp:157] Top shape: 1 4 (4)
I0625 16:02:41.597528 26548 net.cpp:165] Memory required for data: 21600108
I0625 16:02:41.597533 26548 layer_factory.hpp:77] Creating layer conv1_1
I0625 16:02:41.597544 26548 net.cpp:106] Creating Layer conv1_1
I0625 16:02:41.597548 26548 net.cpp:454] conv1_1 <- data_input-data_0_split_0
I0625 16:02:41.597554 26548 net.cpp:411] conv1_1 -> conv1_1
I0625 16:02:41.892443 26548 net.cpp:150] Setting up conv1_1
I0625 16:02:41.892462 26548 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 16:02:41.892463 26548 net.cpp:165] Memory required for data: 175200108
I0625 16:02:41.892474 26548 layer_factory.hpp:77] Creating layer relu1_1
I0625 16:02:41.892493 26548 net.cpp:106] Creating Layer relu1_1
I0625 16:02:41.892495 26548 net.cpp:454] relu1_1 <- conv1_1
I0625 16:02:41.892500 26548 net.cpp:397] relu1_1 -> conv1_1 (in-place)
I0625 16:02:41.892627 26548 net.cpp:150] Setting up relu1_1
I0625 16:02:41.892633 26548 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 16:02:41.892635 26548 net.cpp:165] Memory required for data: 328800108
I0625 16:02:41.892637 26548 layer_factory.hpp:77] Creating layer conv1_2
I0625 16:02:41.892643 26548 net.cpp:106] Creating Layer conv1_2
I0625 16:02:41.892645 26548 net.cpp:454] conv1_2 <- conv1_1
I0625 16:02:41.892648 26548 net.cpp:411] conv1_2 -> conv1_2
I0625 16:02:41.894683 26548 net.cpp:150] Setting up conv1_2
I0625 16:02:41.894693 26548 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 16:02:41.894695 26548 net.cpp:165] Memory required for data: 482400108
I0625 16:02:41.894702 26548 layer_factory.hpp:77] Creating layer relu1_2
I0625 16:02:41.894707 26548 net.cpp:106] Creating Layer relu1_2
I0625 16:02:41.894709 26548 net.cpp:454] relu1_2 <- conv1_2
I0625 16:02:41.894721 26548 net.cpp:397] relu1_2 -> conv1_2 (in-place)
I0625 16:02:41.894846 26548 net.cpp:150] Setting up relu1_2
I0625 16:02:41.894853 26548 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 16:02:41.894865 26548 net.cpp:165] Memory required for data: 636000108
I0625 16:02:41.894866 26548 layer_factory.hpp:77] Creating layer pool1
I0625 16:02:41.894874 26548 net.cpp:106] Creating Layer pool1
I0625 16:02:41.894878 26548 net.cpp:454] pool1 <- conv1_2
I0625 16:02:41.894884 26548 net.cpp:411] pool1 -> pool1
I0625 16:02:41.894925 26548 net.cpp:150] Setting up pool1
I0625 16:02:41.894930 26548 net.cpp:157] Top shape: 1 64 300 500 (9600000)
I0625 16:02:41.894932 26548 net.cpp:165] Memory required for data: 674400108
I0625 16:02:41.894935 26548 layer_factory.hpp:77] Creating layer conv2_1
I0625 16:02:41.894944 26548 net.cpp:106] Creating Layer conv2_1
I0625 16:02:41.894948 26548 net.cpp:454] conv2_1 <- pool1
I0625 16:02:41.894954 26548 net.cpp:411] conv2_1 -> conv2_1
I0625 16:02:41.896709 26548 net.cpp:150] Setting up conv2_1
I0625 16:02:41.896718 26548 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 16:02:41.896720 26548 net.cpp:165] Memory required for data: 751200108
I0625 16:02:41.896729 26548 layer_factory.hpp:77] Creating layer relu2_1
I0625 16:02:41.896736 26548 net.cpp:106] Creating Layer relu2_1
I0625 16:02:41.896740 26548 net.cpp:454] relu2_1 <- conv2_1
I0625 16:02:41.896745 26548 net.cpp:397] relu2_1 -> conv2_1 (in-place)
I0625 16:02:41.897209 26548 net.cpp:150] Setting up relu2_1
I0625 16:02:41.897228 26548 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 16:02:41.897228 26548 net.cpp:165] Memory required for data: 828000108
I0625 16:02:41.897230 26548 layer_factory.hpp:77] Creating layer conv2_2
I0625 16:02:41.897238 26548 net.cpp:106] Creating Layer conv2_2
I0625 16:02:41.897240 26548 net.cpp:454] conv2_2 <- conv2_1
I0625 16:02:41.897255 26548 net.cpp:411] conv2_2 -> conv2_2
I0625 16:02:41.898589 26548 net.cpp:150] Setting up conv2_2
I0625 16:02:41.898599 26548 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 16:02:41.898602 26548 net.cpp:165] Memory required for data: 904800108
I0625 16:02:41.898615 26548 layer_factory.hpp:77] Creating layer relu2_2
I0625 16:02:41.898620 26548 net.cpp:106] Creating Layer relu2_2
I0625 16:02:41.898624 26548 net.cpp:454] relu2_2 <- conv2_2
I0625 16:02:41.898629 26548 net.cpp:397] relu2_2 -> conv2_2 (in-place)
I0625 16:02:41.898757 26548 net.cpp:150] Setting up relu2_2
I0625 16:02:41.898763 26548 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 16:02:41.898767 26548 net.cpp:165] Memory required for data: 981600108
I0625 16:02:41.898771 26548 layer_factory.hpp:77] Creating layer pool2
I0625 16:02:41.898777 26548 net.cpp:106] Creating Layer pool2
I0625 16:02:41.898779 26548 net.cpp:454] pool2 <- conv2_2
I0625 16:02:41.898785 26548 net.cpp:411] pool2 -> pool2
I0625 16:02:41.898838 26548 net.cpp:150] Setting up pool2
I0625 16:02:41.898842 26548 net.cpp:157] Top shape: 1 128 150 250 (4800000)
I0625 16:02:41.898844 26548 net.cpp:165] Memory required for data: 1000800108
I0625 16:02:41.898855 26548 layer_factory.hpp:77] Creating layer conv3_1
I0625 16:02:41.898862 26548 net.cpp:106] Creating Layer conv3_1
I0625 16:02:41.898866 26548 net.cpp:454] conv3_1 <- pool2
I0625 16:02:41.898880 26548 net.cpp:411] conv3_1 -> conv3_1
I0625 16:02:41.900625 26548 net.cpp:150] Setting up conv3_1
I0625 16:02:41.900633 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.900635 26548 net.cpp:165] Memory required for data: 1039200108
I0625 16:02:41.900645 26548 layer_factory.hpp:77] Creating layer relu3_1
I0625 16:02:41.900652 26548 net.cpp:106] Creating Layer relu3_1
I0625 16:02:41.900656 26548 net.cpp:454] relu3_1 <- conv3_1
I0625 16:02:41.900661 26548 net.cpp:397] relu3_1 -> conv3_1 (in-place)
I0625 16:02:41.900779 26548 net.cpp:150] Setting up relu3_1
I0625 16:02:41.900784 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.900787 26548 net.cpp:165] Memory required for data: 1077600108
I0625 16:02:41.900790 26548 layer_factory.hpp:77] Creating layer conv3_2
I0625 16:02:41.900799 26548 net.cpp:106] Creating Layer conv3_2
I0625 16:02:41.900804 26548 net.cpp:454] conv3_2 <- conv3_1
I0625 16:02:41.900810 26548 net.cpp:411] conv3_2 -> conv3_2
I0625 16:02:41.902760 26548 net.cpp:150] Setting up conv3_2
I0625 16:02:41.902768 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.902771 26548 net.cpp:165] Memory required for data: 1116000108
I0625 16:02:41.902777 26548 layer_factory.hpp:77] Creating layer relu3_2
I0625 16:02:41.902783 26548 net.cpp:106] Creating Layer relu3_2
I0625 16:02:41.902787 26548 net.cpp:454] relu3_2 <- conv3_2
I0625 16:02:41.902792 26548 net.cpp:397] relu3_2 -> conv3_2 (in-place)
I0625 16:02:41.902963 26548 net.cpp:150] Setting up relu3_2
I0625 16:02:41.902971 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.902976 26548 net.cpp:165] Memory required for data: 1154400108
I0625 16:02:41.902978 26548 layer_factory.hpp:77] Creating layer conv3_3
I0625 16:02:41.902985 26548 net.cpp:106] Creating Layer conv3_3
I0625 16:02:41.902989 26548 net.cpp:454] conv3_3 <- conv3_2
I0625 16:02:41.902994 26548 net.cpp:411] conv3_3 -> conv3_3
I0625 16:02:41.905335 26548 net.cpp:150] Setting up conv3_3
I0625 16:02:41.905346 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.905349 26548 net.cpp:165] Memory required for data: 1192800108
I0625 16:02:41.905355 26548 layer_factory.hpp:77] Creating layer relu3_3
I0625 16:02:41.905362 26548 net.cpp:106] Creating Layer relu3_3
I0625 16:02:41.905367 26548 net.cpp:454] relu3_3 <- conv3_3
I0625 16:02:41.905373 26548 net.cpp:397] relu3_3 -> conv3_3 (in-place)
I0625 16:02:41.905493 26548 net.cpp:150] Setting up relu3_3
I0625 16:02:41.905498 26548 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 16:02:41.905501 26548 net.cpp:165] Memory required for data: 1231200108
I0625 16:02:41.905504 26548 layer_factory.hpp:77] Creating layer pool3
I0625 16:02:41.905510 26548 net.cpp:106] Creating Layer pool3
I0625 16:02:41.905515 26548 net.cpp:454] pool3 <- conv3_3
I0625 16:02:41.905520 26548 net.cpp:411] pool3 -> pool3
I0625 16:02:41.905556 26548 net.cpp:150] Setting up pool3
I0625 16:02:41.905560 26548 net.cpp:157] Top shape: 1 256 75 125 (2400000)
I0625 16:02:41.905562 26548 net.cpp:165] Memory required for data: 1240800108
I0625 16:02:41.905565 26548 layer_factory.hpp:77] Creating layer conv4_1
I0625 16:02:41.905571 26548 net.cpp:106] Creating Layer conv4_1
I0625 16:02:41.905575 26548 net.cpp:454] conv4_1 <- pool3
I0625 16:02:41.905581 26548 net.cpp:411] conv4_1 -> conv4_1
I0625 16:02:41.909174 26548 net.cpp:150] Setting up conv4_1
I0625 16:02:41.909193 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.909195 26548 net.cpp:165] Memory required for data: 1260000108
I0625 16:02:41.909202 26548 layer_factory.hpp:77] Creating layer relu4_1
I0625 16:02:41.909212 26548 net.cpp:106] Creating Layer relu4_1
I0625 16:02:41.909219 26548 net.cpp:454] relu4_1 <- conv4_1
I0625 16:02:41.909225 26548 net.cpp:397] relu4_1 -> conv4_1 (in-place)
I0625 16:02:41.909353 26548 net.cpp:150] Setting up relu4_1
I0625 16:02:41.909359 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.909363 26548 net.cpp:165] Memory required for data: 1279200108
I0625 16:02:41.909366 26548 layer_factory.hpp:77] Creating layer conv4_2
I0625 16:02:41.909385 26548 net.cpp:106] Creating Layer conv4_2
I0625 16:02:41.909389 26548 net.cpp:454] conv4_2 <- conv4_1
I0625 16:02:41.909395 26548 net.cpp:411] conv4_2 -> conv4_2
I0625 16:02:41.914010 26548 net.cpp:150] Setting up conv4_2
I0625 16:02:41.914029 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.914031 26548 net.cpp:165] Memory required for data: 1298400108
I0625 16:02:41.914042 26548 layer_factory.hpp:77] Creating layer relu4_2
I0625 16:02:41.914052 26548 net.cpp:106] Creating Layer relu4_2
I0625 16:02:41.914058 26548 net.cpp:454] relu4_2 <- conv4_2
I0625 16:02:41.914064 26548 net.cpp:397] relu4_2 -> conv4_2 (in-place)
I0625 16:02:41.914649 26548 net.cpp:150] Setting up relu4_2
I0625 16:02:41.914657 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.914659 26548 net.cpp:165] Memory required for data: 1317600108
I0625 16:02:41.914661 26548 layer_factory.hpp:77] Creating layer conv4_3
I0625 16:02:41.914680 26548 net.cpp:106] Creating Layer conv4_3
I0625 16:02:41.914683 26548 net.cpp:454] conv4_3 <- conv4_2
I0625 16:02:41.914690 26548 net.cpp:411] conv4_3 -> conv4_3
I0625 16:02:41.919281 26548 net.cpp:150] Setting up conv4_3
I0625 16:02:41.919306 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.919309 26548 net.cpp:165] Memory required for data: 1336800108
I0625 16:02:41.919319 26548 layer_factory.hpp:77] Creating layer relu4_3
I0625 16:02:41.919342 26548 net.cpp:106] Creating Layer relu4_3
I0625 16:02:41.919348 26548 net.cpp:454] relu4_3 <- conv4_3
I0625 16:02:41.919364 26548 net.cpp:397] relu4_3 -> conv4_3 (in-place)
I0625 16:02:41.919548 26548 net.cpp:150] Setting up relu4_3
I0625 16:02:41.919569 26548 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 16:02:41.919572 26548 net.cpp:165] Memory required for data: 1356000108
I0625 16:02:41.919576 26548 layer_factory.hpp:77] Creating layer pool4
I0625 16:02:41.919595 26548 net.cpp:106] Creating Layer pool4
I0625 16:02:41.919598 26548 net.cpp:454] pool4 <- conv4_3
I0625 16:02:41.919605 26548 net.cpp:411] pool4 -> pool4
I0625 16:02:41.919695 26548 net.cpp:150] Setting up pool4
I0625 16:02:41.919713 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.919716 26548 net.cpp:165] Memory required for data: 1360903020
I0625 16:02:41.919719 26548 layer_factory.hpp:77] Creating layer conv5_1
I0625 16:02:41.919737 26548 net.cpp:106] Creating Layer conv5_1
I0625 16:02:41.919740 26548 net.cpp:454] conv5_1 <- pool4
I0625 16:02:41.919745 26548 net.cpp:411] conv5_1 -> conv5_1
I0625 16:02:41.924197 26548 net.cpp:150] Setting up conv5_1
I0625 16:02:41.924217 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.924219 26548 net.cpp:165] Memory required for data: 1365805932
I0625 16:02:41.924226 26548 layer_factory.hpp:77] Creating layer relu5_1
I0625 16:02:41.924234 26548 net.cpp:106] Creating Layer relu5_1
I0625 16:02:41.924238 26548 net.cpp:454] relu5_1 <- conv5_1
I0625 16:02:41.924242 26548 net.cpp:397] relu5_1 -> conv5_1 (in-place)
I0625 16:02:41.924377 26548 net.cpp:150] Setting up relu5_1
I0625 16:02:41.924383 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.924386 26548 net.cpp:165] Memory required for data: 1370708844
I0625 16:02:41.924387 26548 layer_factory.hpp:77] Creating layer conv5_2
I0625 16:02:41.924393 26548 net.cpp:106] Creating Layer conv5_2
I0625 16:02:41.924396 26548 net.cpp:454] conv5_2 <- conv5_1
I0625 16:02:41.924399 26548 net.cpp:411] conv5_2 -> conv5_2
I0625 16:02:41.928593 26548 net.cpp:150] Setting up conv5_2
I0625 16:02:41.928623 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.928627 26548 net.cpp:165] Memory required for data: 1375611756
I0625 16:02:41.928642 26548 layer_factory.hpp:77] Creating layer relu5_2
I0625 16:02:41.928648 26548 net.cpp:106] Creating Layer relu5_2
I0625 16:02:41.928653 26548 net.cpp:454] relu5_2 <- conv5_2
I0625 16:02:41.928658 26548 net.cpp:397] relu5_2 -> conv5_2 (in-place)
I0625 16:02:41.928797 26548 net.cpp:150] Setting up relu5_2
I0625 16:02:41.928802 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.928804 26548 net.cpp:165] Memory required for data: 1380514668
I0625 16:02:41.928807 26548 layer_factory.hpp:77] Creating layer conv5_3
I0625 16:02:41.928815 26548 net.cpp:106] Creating Layer conv5_3
I0625 16:02:41.928817 26548 net.cpp:454] conv5_3 <- conv5_2
I0625 16:02:41.928823 26548 net.cpp:411] conv5_3 -> conv5_3
I0625 16:02:41.933454 26548 net.cpp:150] Setting up conv5_3
I0625 16:02:41.933485 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.933486 26548 net.cpp:165] Memory required for data: 1385417580
I0625 16:02:41.933493 26548 layer_factory.hpp:77] Creating layer relu5_3
I0625 16:02:41.933501 26548 net.cpp:106] Creating Layer relu5_3
I0625 16:02:41.933504 26548 net.cpp:454] relu5_3 <- conv5_3
I0625 16:02:41.933511 26548 net.cpp:397] relu5_3 -> conv5_3 (in-place)
I0625 16:02:41.933647 26548 net.cpp:150] Setting up relu5_3
I0625 16:02:41.933653 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.933655 26548 net.cpp:165] Memory required for data: 1390320492
I0625 16:02:41.933658 26548 layer_factory.hpp:77] Creating layer conv5_3_relu5_3_0_split
I0625 16:02:41.933663 26548 net.cpp:106] Creating Layer conv5_3_relu5_3_0_split
I0625 16:02:41.933667 26548 net.cpp:454] conv5_3_relu5_3_0_split <- conv5_3
I0625 16:02:41.933673 26548 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_0
I0625 16:02:41.933681 26548 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_1
I0625 16:02:41.933686 26548 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_2
I0625 16:02:41.933727 26548 net.cpp:150] Setting up conv5_3_relu5_3_0_split
I0625 16:02:41.933732 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.933734 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.933739 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.933742 26548 net.cpp:165] Memory required for data: 1405029228
I0625 16:02:41.933744 26548 layer_factory.hpp:77] Creating layer rpn_conv/3x3
I0625 16:02:41.933764 26548 net.cpp:106] Creating Layer rpn_conv/3x3
I0625 16:02:41.933769 26548 net.cpp:454] rpn_conv/3x3 <- conv5_3_relu5_3_0_split_0
I0625 16:02:41.933775 26548 net.cpp:411] rpn_conv/3x3 -> rpn/output
I0625 16:02:41.984242 26548 net.cpp:150] Setting up rpn_conv/3x3
I0625 16:02:41.984259 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.984261 26548 net.cpp:165] Memory required for data: 1409932140
I0625 16:02:41.984267 26548 layer_factory.hpp:77] Creating layer rpn_relu/3x3
I0625 16:02:41.984277 26548 net.cpp:106] Creating Layer rpn_relu/3x3
I0625 16:02:41.984290 26548 net.cpp:454] rpn_relu/3x3 <- rpn/output
I0625 16:02:41.984294 26548 net.cpp:397] rpn_relu/3x3 -> rpn/output (in-place)
I0625 16:02:41.984429 26548 net.cpp:150] Setting up rpn_relu/3x3
I0625 16:02:41.984436 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.984438 26548 net.cpp:165] Memory required for data: 1414835052
I0625 16:02:41.984441 26548 layer_factory.hpp:77] Creating layer rpn/output_rpn_relu/3x3_0_split
I0625 16:02:41.984443 26548 net.cpp:106] Creating Layer rpn/output_rpn_relu/3x3_0_split
I0625 16:02:41.984445 26548 net.cpp:454] rpn/output_rpn_relu/3x3_0_split <- rpn/output
I0625 16:02:41.984448 26548 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_0
I0625 16:02:41.984452 26548 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_1
I0625 16:02:41.984504 26548 net.cpp:150] Setting up rpn/output_rpn_relu/3x3_0_split
I0625 16:02:41.984511 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.984513 26548 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 16:02:41.984515 26548 net.cpp:165] Memory required for data: 1424640876
I0625 16:02:41.984516 26548 layer_factory.hpp:77] Creating layer rpn_cls_score
I0625 16:02:41.984524 26548 net.cpp:106] Creating Layer rpn_cls_score
I0625 16:02:41.984525 26548 net.cpp:454] rpn_cls_score <- rpn/output_rpn_relu/3x3_0_split_0
I0625 16:02:41.984539 26548 net.cpp:411] rpn_cls_score -> rpn_cls_score
I0625 16:02:41.986083 26548 net.cpp:150] Setting up rpn_cls_score
I0625 16:02:41.986091 26548 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 16:02:41.986093 26548 net.cpp:165] Memory required for data: 1424928156
I0625 16:02:41.986097 26548 layer_factory.hpp:77] Creating layer rpn_cls_score_rpn_cls_score_0_split
I0625 16:02:41.986100 26548 net.cpp:106] Creating Layer rpn_cls_score_rpn_cls_score_0_split
I0625 16:02:41.986102 26548 net.cpp:454] rpn_cls_score_rpn_cls_score_0_split <- rpn_cls_score
I0625 16:02:41.986105 26548 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_0
I0625 16:02:41.986119 26548 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_1
I0625 16:02:41.986163 26548 net.cpp:150] Setting up rpn_cls_score_rpn_cls_score_0_split
I0625 16:02:41.986171 26548 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 16:02:41.986172 26548 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 16:02:41.986173 26548 net.cpp:165] Memory required for data: 1425502716
I0625 16:02:41.986176 26548 layer_factory.hpp:77] Creating layer rpn_bbox_pred
I0625 16:02:41.986181 26548 net.cpp:106] Creating Layer rpn_bbox_pred
I0625 16:02:41.986184 26548 net.cpp:454] rpn_bbox_pred <- rpn/output_rpn_relu/3x3_0_split_1
I0625 16:02:41.986189 26548 net.cpp:411] rpn_bbox_pred -> rpn_bbox_pred
I0625 16:02:41.987778 26548 net.cpp:150] Setting up rpn_bbox_pred
I0625 16:02:41.987787 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.987788 26548 net.cpp:165] Memory required for data: 1426077276
I0625 16:02:41.987792 26548 layer_factory.hpp:77] Creating layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 16:02:41.987795 26548 net.cpp:106] Creating Layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 16:02:41.987797 26548 net.cpp:454] rpn_bbox_pred_rpn_bbox_pred_0_split <- rpn_bbox_pred
I0625 16:02:41.987802 26548 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0625 16:02:41.987805 26548 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0625 16:02:41.987840 26548 net.cpp:150] Setting up rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 16:02:41.987845 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.987848 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.987849 26548 net.cpp:165] Memory required for data: 1427226396
I0625 16:02:41.987851 26548 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape
I0625 16:02:41.987860 26548 net.cpp:106] Creating Layer rpn_cls_score_reshape
I0625 16:02:41.987862 26548 net.cpp:454] rpn_cls_score_reshape <- rpn_cls_score_rpn_cls_score_0_split_0
I0625 16:02:41.987865 26548 net.cpp:411] rpn_cls_score_reshape -> rpn_cls_score_reshape
I0625 16:02:41.987890 26548 net.cpp:150] Setting up rpn_cls_score_reshape
I0625 16:02:41.987895 26548 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 16:02:41.987897 26548 net.cpp:165] Memory required for data: 1427513676
I0625 16:02:41.987900 26548 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 16:02:41.987902 26548 net.cpp:106] Creating Layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 16:02:41.987905 26548 net.cpp:454] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split <- rpn_cls_score_reshape
I0625 16:02:41.987907 26548 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0625 16:02:41.987910 26548 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0625 16:02:41.987932 26548 net.cpp:150] Setting up rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 16:02:41.987936 26548 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 16:02:41.987937 26548 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 16:02:41.987939 26548 net.cpp:165] Memory required for data: 1428088236
I0625 16:02:41.987941 26548 layer_factory.hpp:77] Creating layer rpn-data
I0625 16:02:41.988898 26548 net.cpp:106] Creating Layer rpn-data
I0625 16:02:41.988905 26548 net.cpp:454] rpn-data <- rpn_cls_score_rpn_cls_score_0_split_1
I0625 16:02:41.988909 26548 net.cpp:454] rpn-data <- gt_boxes_input-data_2_split_0
I0625 16:02:41.988912 26548 net.cpp:454] rpn-data <- im_info_input-data_1_split_0
I0625 16:02:41.988915 26548 net.cpp:454] rpn-data <- data_input-data_0_split_1
I0625 16:02:41.988919 26548 net.cpp:411] rpn-data -> rpn_labels
I0625 16:02:41.988922 26548 net.cpp:411] rpn-data -> rpn_bbox_targets
I0625 16:02:41.988926 26548 net.cpp:411] rpn-data -> rpn_bbox_inside_weights
I0625 16:02:41.988930 26548 net.cpp:411] rpn-data -> rpn_bbox_outside_weights
===================================anchor_scales in AnchorTargetLayer:=============(2, 4, 8, 16, 32)
I0625 16:02:41.989763 26548 net.cpp:150] Setting up rpn-data
I0625 16:02:41.989773 26548 net.cpp:157] Top shape: 1 1 570 63 (35910)
I0625 16:02:41.989775 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.989778 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.989780 26548 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 16:02:41.989781 26548 net.cpp:165] Memory required for data: 1429955556
I0625 16:02:41.989784 26548 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0625 16:02:41.989789 26548 net.cpp:106] Creating Layer rpn_loss_cls
I0625 16:02:41.989792 26548 net.cpp:454] rpn_loss_cls <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0625 16:02:41.989795 26548 net.cpp:454] rpn_loss_cls <- rpn_labels
I0625 16:02:41.989799 26548 net.cpp:411] rpn_loss_cls -> rpn_cls_loss
I0625 16:02:41.989804 26548 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0625 16:02:41.990438 26548 net.cpp:150] Setting up rpn_loss_cls
I0625 16:02:41.990447 26548 net.cpp:157] Top shape: (1)
I0625 16:02:41.990449 26548 net.cpp:160]     with loss weight 1
I0625 16:02:41.990456 26548 net.cpp:165] Memory required for data: 1429955560
I0625 16:02:41.990458 26548 layer_factory.hpp:77] Creating layer rpn_loss_bbox
I0625 16:02:41.990463 26548 net.cpp:106] Creating Layer rpn_loss_bbox
I0625 16:02:41.990465 26548 net.cpp:454] rpn_loss_bbox <- rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0625 16:02:41.990468 26548 net.cpp:454] rpn_loss_bbox <- rpn_bbox_targets
I0625 16:02:41.990470 26548 net.cpp:454] rpn_loss_bbox <- rpn_bbox_inside_weights
I0625 16:02:41.990473 26548 net.cpp:454] rpn_loss_bbox <- rpn_bbox_outside_weights
I0625 16:02:41.990475 26548 net.cpp:411] rpn_loss_bbox -> rpn_loss_bbox
I0625 16:02:41.991504 26548 net.cpp:150] Setting up rpn_loss_bbox
I0625 16:02:41.991511 26548 net.cpp:157] Top shape: (1)
I0625 16:02:41.991513 26548 net.cpp:160]     with loss weight 1
I0625 16:02:41.991516 26548 net.cpp:165] Memory required for data: 1429955564
I0625 16:02:41.991518 26548 layer_factory.hpp:77] Creating layer rpn_cls_prob
I0625 16:02:41.991521 26548 net.cpp:106] Creating Layer rpn_cls_prob
I0625 16:02:41.991524 26548 net.cpp:454] rpn_cls_prob <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0625 16:02:41.991538 26548 net.cpp:411] rpn_cls_prob -> rpn_cls_prob
I0625 16:02:41.991695 26548 net.cpp:150] Setting up rpn_cls_prob
I0625 16:02:41.991701 26548 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 16:02:41.991703 26548 net.cpp:165] Memory required for data: 1430242844
I0625 16:02:41.991705 26548 layer_factory.hpp:77] Creating layer rpn_cls_prob_reshape
I0625 16:02:41.991709 26548 net.cpp:106] Creating Layer rpn_cls_prob_reshape
I0625 16:02:41.991713 26548 net.cpp:454] rpn_cls_prob_reshape <- rpn_cls_prob
I0625 16:02:41.991715 26548 net.cpp:411] rpn_cls_prob_reshape -> rpn_cls_prob_reshape
I0625 16:02:41.991731 26548 net.cpp:150] Setting up rpn_cls_prob_reshape
I0625 16:02:41.991735 26548 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 16:02:41.991736 26548 net.cpp:165] Memory required for data: 1430530124
I0625 16:02:41.991739 26548 layer_factory.hpp:77] Creating layer proposal
I0625 16:02:41.993330 26548 net.cpp:106] Creating Layer proposal
I0625 16:02:41.993337 26548 net.cpp:454] proposal <- rpn_cls_prob_reshape
I0625 16:02:41.993341 26548 net.cpp:454] proposal <- rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0625 16:02:41.993345 26548 net.cpp:454] proposal <- im_info_input-data_1_split_1
I0625 16:02:41.993347 26548 net.cpp:411] proposal -> rpn_rois
=================================anchor_scales in ProposalLayer:=============(2, 4, 8, 16, 32)
I0625 16:02:41.994448 26548 net.cpp:150] Setting up proposal
I0625 16:02:41.994457 26548 net.cpp:157] Top shape: 1 5 (5)
I0625 16:02:41.994459 26548 net.cpp:165] Memory required for data: 1430530144
I0625 16:02:41.994462 26548 layer_factory.hpp:77] Creating layer roi-data
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/rpn/proposal_target_layer.py", line 83
    roi_mask_kl = -1 * np.ones((roi_mask.shape[0], roi_mask.shape[1], cfg.TRAIN.CLASS_NUM + 1), dtype=np.float32)
    ^
IndentationError: unexpected indent
Traceback (most recent call last):
  File "./tools/train_net.py", line 116, in <module>
    max_iters=args.max_iters)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 168, in train_net
    pretrained_model=pretrained_model)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 52, in __init__
    self.solver = caffe.SGDSolver(solver_prototxt)
SystemError: NULL result without error in PyObject_Call
