+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-25_15-09-08
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2019-06-25_15-09-08
+ /usr/bin/python ./tools/train_net.py --gpu 0 --solver models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt --weights data/imagenet_models/VGG16.v2.caffemodel --imdb voc_2012_train --iters 2000000 --cfg experiments/cfgs/faster_rcnn_end2end.yml
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', gpu_id=0, imdb_name='voc_2012_train', max_iters=2000000, pretrained_model='data/imagenet_models/VGG16.v2.caffemodel', randomize=False, set_cfgs=None, solver='models/pascal_voc/VGG16/faster_rcnn_end2end/solver.prototxt')
Using config:
{'BBOX_XFORM_CLIP': 4.135166556742356,
 'DATA_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net/models/coco',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RNG_SEED': 7,
 'ROOT_DIR': '/home/fujenchu/projects/affordanceContext/affordance-net',
 'TEST': {'BBOX_REG': True,
          'HAS_RPN': True,
          'MASK_REG': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False,
          'TEST_INSTANCE': True},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 48,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CLASS_NUM': 7,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'KLdivergence': True,
           'MASK_REG': True,
           'MASK_SIZE': 244,
           'MAX_SIZE': 1000,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'TRAINING_DATA': 'VOC_2012_train',
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
Loaded dataset `voc_2012_train` for training
Set proposal method: gt
Appending horizontally-flipped training examples...
voc_2012_train gt roidb loaded from /home/fujenchu/projects/affordanceContext/affordance-net/data/cache/voc_2012_train_gt_roidb.pkl
done
Preparing training data...
done
41748 roidb entries
Output will be saved to `/home/fujenchu/projects/affordanceContext/affordance-net/output/faster_rcnn_end2end/voc_2012_train`
Filtered 0 roidb entries: 41748 -> 41748
cfg.TRAIN.BBOX_REG = True
Computing bounding-box regression targets...
bbox target means:
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[0. 0. 0. 0.]
bbox target stdevs:
[[0.1 0.1 0.2 0.2]
 [0.1 0.1 0.2 0.2]]
[0.1 0.1 0.2 0.2]
Normalizing targets
done
WARNING: Logging before InitGoogleLogging() is written to STDERR
I0625 15:09:22.655467 25049 solver.cpp:48] Initializing solver from parameters: 
train_net: "models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt"
base_lr: 0.001
display: 20
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 49370
snapshot: 0
snapshot_prefix: "vgg16_faster_rcnn"
average_loss: 100
iter_size: 2
I0625 15:09:22.655488 25049 solver.cpp:81] Creating training net from train_net file: models/pascal_voc/VGG16/faster_rcnn_end2end/train.prototxt
I0625 15:09:22.657176 25049 net.cpp:49] Initializing net from parameters: 
name: "VGG_ILSVRC_16_layers"
state {
  phase: TRAIN
}
layer {
  name: "input-data"
  type: "Python"
  top: "data"
  top: "im_info"
  top: "gt_boxes"
  top: "seg_mask_inds"
  top: "flipped"
  python_param {
    module: "roi_data_layer.layer"
    layer: "RoIDataLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 30
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 60
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "rpn_cls_score_reshape"
  type: "Reshape"
  bottom: "rpn_cls_score"
  top: "rpn_cls_score_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 2
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "rpn-data"
  type: "Python"
  bottom: "rpn_cls_score"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "data"
  top: "rpn_labels"
  top: "rpn_bbox_targets"
  top: "rpn_bbox_inside_weights"
  top: "rpn_bbox_outside_weights"
  python_param {
    module: "rpn.anchor_target_layer"
    layer: "AnchorTargetLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  top: "rpn_cls_loss"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: "rpn_bbox_inside_weights"
  bottom: "rpn_bbox_outside_weights"
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param {
    sigma: 3
  }
}
layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: "rpn_cls_prob_reshape"
  type: "Reshape"
  bottom: "rpn_cls_prob"
  top: "rpn_cls_prob_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: 30
      dim: -1
      dim: 0
    }
  }
}
layer {
  name: "proposal"
  type: "Python"
  bottom: "rpn_cls_prob_reshape"
  bottom: "rpn_bbox_pred"
  bottom: "im_info"
  top: "rpn_rois"
  python_param {
    module: "rpn.proposal_layer"
    layer: "ProposalLayer"
    param_str: "\'feat_stride\': 16 \n\'scales\': !!python/tuple [2, 4, 8, 16, 32]"
  }
}
layer {
  name: "roi-data"
  type: "Python"
  bottom: "rpn_rois"
  bottom: "gt_boxes"
  bottom: "im_info"
  bottom: "seg_mask_inds"
  bottom: "flipped"
  top: "rois"
  top: "labels"
  top: "bbox_targets"
  top: "bbox_inside_weights"
  top: "bbox_outside_weights"
  top: "mask_targets"
  top: "rois_pos"
  top: "attrArray"
  top: "attrArrayInd"
  top: "attrArrayShift"
  python_param {
    module: "rpn.proposal_target_layer"
    layer: "ProposalTargetLayer"
    param_str: "\'num_classes\': 2"
  }
}
layer {
  name: "roi_pool5"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "attr_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "attr_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 7
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "attr_score_pos"
  type: "Eltwise"
  bottom: "attr_score"
  bottom: "attrArrayInd"
  top: "attr_score_pos"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "attr_score_pos_shift"
  type: "Eltwise"
  bottom: "attr_score_pos"
  bottom: "attrArrayShift"
  top: "attr_score_pos_shift"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_attribute"
  type: "SigmoidCrossEntropyLoss"
  bottom: "attr_score_pos_shift"
  bottom: "attrArray"
  top: "loss_attribute"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  loss_weight: 3
  propagate_down: true
  propagate_down: false
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 2
}
layer {
  name: "roi_pool5_2"
  type: "ROIAlignment"
  bottom: "conv5_3"
  bottom: "rois_pos"
  top: "pool5_2"
  roi_alignment_param {
    pooled_h: 7
    pooled_w: 7
    spatial_scale: 0.0625
  }
}
layer {
  name: "pool5_2_conv"
  type: "Convolution"
  bottom: "pool5_2"
  top: "pool5_2_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv_relu"
  type: "ReLU"
  bottom: "pool5_2_conv"
  top: "pool5_2_conv_relu"
}
layer {
  name: "pool5_2_conv2"
  type: "Convolution"
  bottom: "pool5_2_conv_relu"
  top: "pool5_2_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv2_relu"
  type: "ReLU"
  bottom: "pool5_2_conv2"
  top: "pool5_2_conv2_relu"
}
layer {
  name: "mask_deconv1"
  type: "Deconvolution"
  bottom: "pool5_2_conv2_relu"
  top: "mask_deconv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv3"
  type: "Convolution"
  bottom: "mask_deconv1"
  top: "pool5_2_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv3_relu"
  type: "ReLU"
  bottom: "pool5_2_conv3"
  top: "pool5_2_conv3_relu"
}
layer {
  name: "pool5_2_conv4"
  type: "Convolution"
  bottom: "pool5_2_conv3_relu"
  top: "pool5_2_conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv4_relu"
  type: "ReLU"
  bottom: "pool5_2_conv4"
  top: "pool5_2_conv4_relu"
}
layer {
  name: "query_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "query_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "key_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "key_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "value_conv"
  type: "Convolution"
  bottom: "pool5_2_conv4_relu"
  top: "value_conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "query_conv_reshape"
  type: "Reshape"
  bottom: "query_conv"
  top: "query_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 64
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "key_conv_reshape"
  type: "Reshape"
  bottom: "key_conv"
  top: "key_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 64
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "value_conv_reshape"
  type: "Reshape"
  bottom: "value_conv"
  top: "value_conv_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 512
      dim: 900
      dim: 1
    }
  }
}
layer {
  name: "query_conv_reshape_perm"
  type: "Permute"
  bottom: "query_conv_reshape"
  top: "query_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 2
    order: 1
  }
}
layer {
  name: "key_conv_reshape_perm"
  type: "Permute"
  bottom: "key_conv_reshape"
  top: "key_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "energy"
  type: "MatrixMultiplication"
  bottom: "query_conv_reshape_perm"
  bottom: "key_conv_reshape_perm"
  top: "energy"
}
layer {
  name: "attention"
  type: "Softmax"
  bottom: "energy"
  top: "attention"
  softmax_param {
    axis: 3
  }
}
layer {
  name: "value_conv_reshape_perm"
  type: "Permute"
  bottom: "value_conv_reshape"
  top: "value_conv_reshape_perm"
  permute_param {
    order: 0
    order: 3
    order: 1
    order: 2
  }
}
layer {
  name: "attention_perm"
  type: "Permute"
  bottom: "attention"
  top: "attention_perm"
  permute_param {
    order: 0
    order: 1
    order: 2
    order: 3
  }
}
layer {
  name: "out"
  type: "MatrixMultiplication"
  bottom: "value_conv_reshape_perm"
  bottom: "attention_perm"
  top: "out"
}
layer {
  name: "out_reshape"
  type: "Reshape"
  bottom: "out"
  top: "out_reshape"
  reshape_param {
    shape {
      dim: -1
      dim: 512
      dim: 30
      dim: 30
    }
  }
}
layer {
  name: "out_reshape_scale"
  type: "Scale"
  bottom: "out_reshape"
  top: "out_reshape_scale"
  param {
    name: "scale_conv1_1"
    lr_mult: 1
  }
  scale_param {
    bias_term: false
  }
}
layer {
  name: "out_x"
  type: "Eltwise"
  bottom: "out_reshape_scale"
  bottom: "pool5_2_conv4_relu"
  top: "out_x"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "mask_deconv2"
  type: "Deconvolution"
  bottom: "out_x"
  top: "mask_deconv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 8
    group: 256
    stride: 4
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "pool5_2_conv5"
  type: "Convolution"
  bottom: "mask_deconv2"
  top: "pool5_2_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv5_relu"
  type: "ReLU"
  bottom: "pool5_2_conv5"
  top: "pool5_2_conv5_relu"
}
layer {
  name: "pool5_2_conv6"
  type: "Convolution"
  bottom: "pool5_2_conv5_relu"
  top: "pool5_2_conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool5_2_conv6_relu"
  type: "ReLU"
  bottom: "pool5_2_conv6"
  top: "pool5_2_conv6_relu"
}
layer {
  name: "mask_deconv3"
  type: "Deconvolution"
  bottom: "pool5_2_conv6_relu"
  top: "mask_deconv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    group: 256
    stride: 2
    weight_filler {
      type: "bilinear"
    }
  }
}
layer {
  name: "mask_score"
  type: "Convolution"
  bottom: "mask_deconv3"
  top: "mask_score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "mask_score"
  top: "mask_score_softmax"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "log"
  type: "Log"
  bottom: "mask_score_softmax"
  top: "log"
}
layer {
  name: "mult1"
  type: "Eltwise"
  bottom: "log"
  bottom: "mask_targets"
  top: "mult1"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "cross_entropy"
  type: "Power"
  bottom: "mult1"
  top: "cross_entropy"
  power_param {
    power: 1
    scale: -1
    shift: 0
  }
}
layer {
  name: "ce_sum"
  type: "Convolution"
  bottom: "cross_entropy"
  top: "cross_entropy_sum"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "ce_mean"
  type: "Reduction"
  bottom: "cross_entropy_sum"
  top: "cross_entropy_mean"
  loss_weight: 1
  reduction_param {
    operation: MEAN
    axis: 0
  }
}
I0625 15:09:22.657482 25049 layer_factory.hpp:77] Creating layer input-data
I0625 15:09:22.809592 25049 net.cpp:106] Creating Layer input-data
I0625 15:09:22.809643 25049 net.cpp:411] input-data -> data
I0625 15:09:22.809666 25049 net.cpp:411] input-data -> im_info
I0625 15:09:22.809680 25049 net.cpp:411] input-data -> gt_boxes
I0625 15:09:22.809692 25049 net.cpp:411] input-data -> seg_mask_inds
I0625 15:09:22.809703 25049 net.cpp:411] input-data -> flipped
RoiDataLayer: name_to_top: {'gt_boxes': 2, 'data': 0, 'seg_mask_inds': 3, 'im_info': 1, 'flipped': 4}
I0625 15:09:22.867272 25049 net.cpp:150] Setting up input-data
I0625 15:09:22.867292 25049 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 15:09:22.867311 25049 net.cpp:157] Top shape: 1 3 (3)
I0625 15:09:22.867322 25049 net.cpp:157] Top shape: 1 4 (4)
I0625 15:09:22.867334 25049 net.cpp:157] Top shape: 1 2 (2)
I0625 15:09:22.867346 25049 net.cpp:157] Top shape: 1 1 (1)
I0625 15:09:22.867355 25049 net.cpp:165] Memory required for data: 7200040
I0625 15:09:22.867369 25049 layer_factory.hpp:77] Creating layer data_input-data_0_split
I0625 15:09:22.867969 25049 net.cpp:106] Creating Layer data_input-data_0_split
I0625 15:09:22.867987 25049 net.cpp:454] data_input-data_0_split <- data
I0625 15:09:22.868003 25049 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_0
I0625 15:09:22.868021 25049 net.cpp:411] data_input-data_0_split -> data_input-data_0_split_1
I0625 15:09:22.868089 25049 net.cpp:150] Setting up data_input-data_0_split
I0625 15:09:22.868106 25049 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 15:09:22.868119 25049 net.cpp:157] Top shape: 1 3 600 1000 (1800000)
I0625 15:09:22.868129 25049 net.cpp:165] Memory required for data: 21600040
I0625 15:09:22.868139 25049 layer_factory.hpp:77] Creating layer im_info_input-data_1_split
I0625 15:09:22.868155 25049 net.cpp:106] Creating Layer im_info_input-data_1_split
I0625 15:09:22.868166 25049 net.cpp:454] im_info_input-data_1_split <- im_info
I0625 15:09:22.868180 25049 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_0
I0625 15:09:22.868196 25049 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_1
I0625 15:09:22.868212 25049 net.cpp:411] im_info_input-data_1_split -> im_info_input-data_1_split_2
I0625 15:09:22.868266 25049 net.cpp:150] Setting up im_info_input-data_1_split
I0625 15:09:22.868283 25049 net.cpp:157] Top shape: 1 3 (3)
I0625 15:09:22.868294 25049 net.cpp:157] Top shape: 1 3 (3)
I0625 15:09:22.868304 25049 net.cpp:157] Top shape: 1 3 (3)
I0625 15:09:22.868314 25049 net.cpp:165] Memory required for data: 21600076
I0625 15:09:22.868322 25049 layer_factory.hpp:77] Creating layer gt_boxes_input-data_2_split
I0625 15:09:22.868333 25049 net.cpp:106] Creating Layer gt_boxes_input-data_2_split
I0625 15:09:22.868343 25049 net.cpp:454] gt_boxes_input-data_2_split <- gt_boxes
I0625 15:09:22.868355 25049 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_0
I0625 15:09:22.868368 25049 net.cpp:411] gt_boxes_input-data_2_split -> gt_boxes_input-data_2_split_1
I0625 15:09:22.868398 25049 net.cpp:150] Setting up gt_boxes_input-data_2_split
I0625 15:09:22.868404 25049 net.cpp:157] Top shape: 1 4 (4)
I0625 15:09:22.868408 25049 net.cpp:157] Top shape: 1 4 (4)
I0625 15:09:22.868412 25049 net.cpp:165] Memory required for data: 21600108
I0625 15:09:22.868414 25049 layer_factory.hpp:77] Creating layer conv1_1
I0625 15:09:22.868424 25049 net.cpp:106] Creating Layer conv1_1
I0625 15:09:22.868428 25049 net.cpp:454] conv1_1 <- data_input-data_0_split_0
I0625 15:09:22.868433 25049 net.cpp:411] conv1_1 -> conv1_1
I0625 15:09:23.469504 25049 net.cpp:150] Setting up conv1_1
I0625 15:09:23.469530 25049 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 15:09:23.469535 25049 net.cpp:165] Memory required for data: 175200108
I0625 15:09:23.469552 25049 layer_factory.hpp:77] Creating layer relu1_1
I0625 15:09:23.469573 25049 net.cpp:106] Creating Layer relu1_1
I0625 15:09:23.469579 25049 net.cpp:454] relu1_1 <- conv1_1
I0625 15:09:23.469594 25049 net.cpp:397] relu1_1 -> conv1_1 (in-place)
I0625 15:09:23.469790 25049 net.cpp:150] Setting up relu1_1
I0625 15:09:23.469800 25049 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 15:09:23.469804 25049 net.cpp:165] Memory required for data: 328800108
I0625 15:09:23.469807 25049 layer_factory.hpp:77] Creating layer conv1_2
I0625 15:09:23.469817 25049 net.cpp:106] Creating Layer conv1_2
I0625 15:09:23.469821 25049 net.cpp:454] conv1_2 <- conv1_1
I0625 15:09:23.469827 25049 net.cpp:411] conv1_2 -> conv1_2
I0625 15:09:23.473107 25049 net.cpp:150] Setting up conv1_2
I0625 15:09:23.473119 25049 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 15:09:23.473124 25049 net.cpp:165] Memory required for data: 482400108
I0625 15:09:23.473134 25049 layer_factory.hpp:77] Creating layer relu1_2
I0625 15:09:23.473140 25049 net.cpp:106] Creating Layer relu1_2
I0625 15:09:23.473145 25049 net.cpp:454] relu1_2 <- conv1_2
I0625 15:09:23.473163 25049 net.cpp:397] relu1_2 -> conv1_2 (in-place)
I0625 15:09:23.473330 25049 net.cpp:150] Setting up relu1_2
I0625 15:09:23.473340 25049 net.cpp:157] Top shape: 1 64 600 1000 (38400000)
I0625 15:09:23.473342 25049 net.cpp:165] Memory required for data: 636000108
I0625 15:09:23.473346 25049 layer_factory.hpp:77] Creating layer pool1
I0625 15:09:23.473356 25049 net.cpp:106] Creating Layer pool1
I0625 15:09:23.473359 25049 net.cpp:454] pool1 <- conv1_2
I0625 15:09:23.473364 25049 net.cpp:411] pool1 -> pool1
I0625 15:09:23.474030 25049 net.cpp:150] Setting up pool1
I0625 15:09:23.474037 25049 net.cpp:157] Top shape: 1 64 300 500 (9600000)
I0625 15:09:23.474040 25049 net.cpp:165] Memory required for data: 674400108
I0625 15:09:23.474043 25049 layer_factory.hpp:77] Creating layer conv2_1
I0625 15:09:23.474050 25049 net.cpp:106] Creating Layer conv2_1
I0625 15:09:23.474052 25049 net.cpp:454] conv2_1 <- pool1
I0625 15:09:23.474067 25049 net.cpp:411] conv2_1 -> conv2_1
I0625 15:09:23.476534 25049 net.cpp:150] Setting up conv2_1
I0625 15:09:23.476562 25049 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 15:09:23.476565 25049 net.cpp:165] Memory required for data: 751200108
I0625 15:09:23.476586 25049 layer_factory.hpp:77] Creating layer relu2_1
I0625 15:09:23.476605 25049 net.cpp:106] Creating Layer relu2_1
I0625 15:09:23.476610 25049 net.cpp:454] relu2_1 <- conv2_1
I0625 15:09:23.476624 25049 net.cpp:397] relu2_1 -> conv2_1 (in-place)
I0625 15:09:23.477250 25049 net.cpp:150] Setting up relu2_1
I0625 15:09:23.477272 25049 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 15:09:23.477275 25049 net.cpp:165] Memory required for data: 828000108
I0625 15:09:23.477278 25049 layer_factory.hpp:77] Creating layer conv2_2
I0625 15:09:23.477298 25049 net.cpp:106] Creating Layer conv2_2
I0625 15:09:23.477303 25049 net.cpp:454] conv2_2 <- conv2_1
I0625 15:09:23.477308 25049 net.cpp:411] conv2_2 -> conv2_2
I0625 15:09:23.479583 25049 net.cpp:150] Setting up conv2_2
I0625 15:09:23.479593 25049 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 15:09:23.479594 25049 net.cpp:165] Memory required for data: 904800108
I0625 15:09:23.479599 25049 layer_factory.hpp:77] Creating layer relu2_2
I0625 15:09:23.479604 25049 net.cpp:106] Creating Layer relu2_2
I0625 15:09:23.479605 25049 net.cpp:454] relu2_2 <- conv2_2
I0625 15:09:23.479609 25049 net.cpp:397] relu2_2 -> conv2_2 (in-place)
I0625 15:09:23.479722 25049 net.cpp:150] Setting up relu2_2
I0625 15:09:23.479728 25049 net.cpp:157] Top shape: 1 128 300 500 (19200000)
I0625 15:09:23.479730 25049 net.cpp:165] Memory required for data: 981600108
I0625 15:09:23.479732 25049 layer_factory.hpp:77] Creating layer pool2
I0625 15:09:23.479737 25049 net.cpp:106] Creating Layer pool2
I0625 15:09:23.479738 25049 net.cpp:454] pool2 <- conv2_2
I0625 15:09:23.479743 25049 net.cpp:411] pool2 -> pool2
I0625 15:09:23.479768 25049 net.cpp:150] Setting up pool2
I0625 15:09:23.479773 25049 net.cpp:157] Top shape: 1 128 150 250 (4800000)
I0625 15:09:23.479774 25049 net.cpp:165] Memory required for data: 1000800108
I0625 15:09:23.479775 25049 layer_factory.hpp:77] Creating layer conv3_1
I0625 15:09:23.479780 25049 net.cpp:106] Creating Layer conv3_1
I0625 15:09:23.479782 25049 net.cpp:454] conv3_1 <- pool2
I0625 15:09:23.479785 25049 net.cpp:411] conv3_1 -> conv3_1
I0625 15:09:23.482136 25049 net.cpp:150] Setting up conv3_1
I0625 15:09:23.482146 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.482149 25049 net.cpp:165] Memory required for data: 1039200108
I0625 15:09:23.482157 25049 layer_factory.hpp:77] Creating layer relu3_1
I0625 15:09:23.482162 25049 net.cpp:106] Creating Layer relu3_1
I0625 15:09:23.482165 25049 net.cpp:454] relu3_1 <- conv3_1
I0625 15:09:23.482169 25049 net.cpp:397] relu3_1 -> conv3_1 (in-place)
I0625 15:09:23.482308 25049 net.cpp:150] Setting up relu3_1
I0625 15:09:23.482316 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.482317 25049 net.cpp:165] Memory required for data: 1077600108
I0625 15:09:23.482319 25049 layer_factory.hpp:77] Creating layer conv3_2
I0625 15:09:23.482326 25049 net.cpp:106] Creating Layer conv3_2
I0625 15:09:23.482329 25049 net.cpp:454] conv3_2 <- conv3_1
I0625 15:09:23.482333 25049 net.cpp:411] conv3_2 -> conv3_2
I0625 15:09:23.484560 25049 net.cpp:150] Setting up conv3_2
I0625 15:09:23.484580 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.484581 25049 net.cpp:165] Memory required for data: 1116000108
I0625 15:09:23.484587 25049 layer_factory.hpp:77] Creating layer relu3_2
I0625 15:09:23.484591 25049 net.cpp:106] Creating Layer relu3_2
I0625 15:09:23.484604 25049 net.cpp:454] relu3_2 <- conv3_2
I0625 15:09:23.484608 25049 net.cpp:397] relu3_2 -> conv3_2 (in-place)
I0625 15:09:23.484733 25049 net.cpp:150] Setting up relu3_2
I0625 15:09:23.484738 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.484750 25049 net.cpp:165] Memory required for data: 1154400108
I0625 15:09:23.484752 25049 layer_factory.hpp:77] Creating layer conv3_3
I0625 15:09:23.484757 25049 net.cpp:106] Creating Layer conv3_3
I0625 15:09:23.484771 25049 net.cpp:454] conv3_3 <- conv3_2
I0625 15:09:23.484773 25049 net.cpp:411] conv3_3 -> conv3_3
I0625 15:09:23.486915 25049 net.cpp:150] Setting up conv3_3
I0625 15:09:23.486935 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.486937 25049 net.cpp:165] Memory required for data: 1192800108
I0625 15:09:23.486943 25049 layer_factory.hpp:77] Creating layer relu3_3
I0625 15:09:23.486948 25049 net.cpp:106] Creating Layer relu3_3
I0625 15:09:23.486959 25049 net.cpp:454] relu3_3 <- conv3_3
I0625 15:09:23.486963 25049 net.cpp:397] relu3_3 -> conv3_3 (in-place)
I0625 15:09:23.487087 25049 net.cpp:150] Setting up relu3_3
I0625 15:09:23.487092 25049 net.cpp:157] Top shape: 1 256 150 250 (9600000)
I0625 15:09:23.487104 25049 net.cpp:165] Memory required for data: 1231200108
I0625 15:09:23.487107 25049 layer_factory.hpp:77] Creating layer pool3
I0625 15:09:23.487112 25049 net.cpp:106] Creating Layer pool3
I0625 15:09:23.487113 25049 net.cpp:454] pool3 <- conv3_3
I0625 15:09:23.487126 25049 net.cpp:411] pool3 -> pool3
I0625 15:09:23.487165 25049 net.cpp:150] Setting up pool3
I0625 15:09:23.487169 25049 net.cpp:157] Top shape: 1 256 75 125 (2400000)
I0625 15:09:23.487170 25049 net.cpp:165] Memory required for data: 1240800108
I0625 15:09:23.487182 25049 layer_factory.hpp:77] Creating layer conv4_1
I0625 15:09:23.487186 25049 net.cpp:106] Creating Layer conv4_1
I0625 15:09:23.487188 25049 net.cpp:454] conv4_1 <- pool3
I0625 15:09:23.487191 25049 net.cpp:411] conv4_1 -> conv4_1
I0625 15:09:23.491456 25049 net.cpp:150] Setting up conv4_1
I0625 15:09:23.491475 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.491477 25049 net.cpp:165] Memory required for data: 1260000108
I0625 15:09:23.491485 25049 layer_factory.hpp:77] Creating layer relu4_1
I0625 15:09:23.491503 25049 net.cpp:106] Creating Layer relu4_1
I0625 15:09:23.491506 25049 net.cpp:454] relu4_1 <- conv4_1
I0625 15:09:23.491510 25049 net.cpp:397] relu4_1 -> conv4_1 (in-place)
I0625 15:09:23.491636 25049 net.cpp:150] Setting up relu4_1
I0625 15:09:23.491642 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.491654 25049 net.cpp:165] Memory required for data: 1279200108
I0625 15:09:23.491657 25049 layer_factory.hpp:77] Creating layer conv4_2
I0625 15:09:23.491663 25049 net.cpp:106] Creating Layer conv4_2
I0625 15:09:23.491665 25049 net.cpp:454] conv4_2 <- conv4_1
I0625 15:09:23.491668 25049 net.cpp:411] conv4_2 -> conv4_2
I0625 15:09:23.496695 25049 net.cpp:150] Setting up conv4_2
I0625 15:09:23.496723 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.496726 25049 net.cpp:165] Memory required for data: 1298400108
I0625 15:09:23.496737 25049 layer_factory.hpp:77] Creating layer relu4_2
I0625 15:09:23.496744 25049 net.cpp:106] Creating Layer relu4_2
I0625 15:09:23.496748 25049 net.cpp:454] relu4_2 <- conv4_2
I0625 15:09:23.496752 25049 net.cpp:397] relu4_2 -> conv4_2 (in-place)
I0625 15:09:23.497231 25049 net.cpp:150] Setting up relu4_2
I0625 15:09:23.497239 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.497243 25049 net.cpp:165] Memory required for data: 1317600108
I0625 15:09:23.497256 25049 layer_factory.hpp:77] Creating layer conv4_3
I0625 15:09:23.497275 25049 net.cpp:106] Creating Layer conv4_3
I0625 15:09:23.497279 25049 net.cpp:454] conv4_3 <- conv4_2
I0625 15:09:23.497284 25049 net.cpp:411] conv4_3 -> conv4_3
I0625 15:09:23.501821 25049 net.cpp:150] Setting up conv4_3
I0625 15:09:23.501843 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.501847 25049 net.cpp:165] Memory required for data: 1336800108
I0625 15:09:23.501868 25049 layer_factory.hpp:77] Creating layer relu4_3
I0625 15:09:23.501886 25049 net.cpp:106] Creating Layer relu4_3
I0625 15:09:23.501893 25049 net.cpp:454] relu4_3 <- conv4_3
I0625 15:09:23.501911 25049 net.cpp:397] relu4_3 -> conv4_3 (in-place)
I0625 15:09:23.502058 25049 net.cpp:150] Setting up relu4_3
I0625 15:09:23.502065 25049 net.cpp:157] Top shape: 1 512 75 125 (4800000)
I0625 15:09:23.502068 25049 net.cpp:165] Memory required for data: 1356000108
I0625 15:09:23.502082 25049 layer_factory.hpp:77] Creating layer pool4
I0625 15:09:23.502100 25049 net.cpp:106] Creating Layer pool4
I0625 15:09:23.502104 25049 net.cpp:454] pool4 <- conv4_3
I0625 15:09:23.502110 25049 net.cpp:411] pool4 -> pool4
I0625 15:09:23.502156 25049 net.cpp:150] Setting up pool4
I0625 15:09:23.502161 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.502166 25049 net.cpp:165] Memory required for data: 1360903020
I0625 15:09:23.502178 25049 layer_factory.hpp:77] Creating layer conv5_1
I0625 15:09:23.502187 25049 net.cpp:106] Creating Layer conv5_1
I0625 15:09:23.502192 25049 net.cpp:454] conv5_1 <- pool4
I0625 15:09:23.502197 25049 net.cpp:411] conv5_1 -> conv5_1
I0625 15:09:23.507011 25049 net.cpp:150] Setting up conv5_1
I0625 15:09:23.507033 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.507036 25049 net.cpp:165] Memory required for data: 1365805932
I0625 15:09:23.507053 25049 layer_factory.hpp:77] Creating layer relu5_1
I0625 15:09:23.507061 25049 net.cpp:106] Creating Layer relu5_1
I0625 15:09:23.507066 25049 net.cpp:454] relu5_1 <- conv5_1
I0625 15:09:23.507069 25049 net.cpp:397] relu5_1 -> conv5_1 (in-place)
I0625 15:09:23.507206 25049 net.cpp:150] Setting up relu5_1
I0625 15:09:23.507212 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.507225 25049 net.cpp:165] Memory required for data: 1370708844
I0625 15:09:23.507226 25049 layer_factory.hpp:77] Creating layer conv5_2
I0625 15:09:23.507233 25049 net.cpp:106] Creating Layer conv5_2
I0625 15:09:23.507236 25049 net.cpp:454] conv5_2 <- conv5_1
I0625 15:09:23.507238 25049 net.cpp:411] conv5_2 -> conv5_2
I0625 15:09:23.512395 25049 net.cpp:150] Setting up conv5_2
I0625 15:09:23.512423 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.512426 25049 net.cpp:165] Memory required for data: 1375611756
I0625 15:09:23.512432 25049 layer_factory.hpp:77] Creating layer relu5_2
I0625 15:09:23.512449 25049 net.cpp:106] Creating Layer relu5_2
I0625 15:09:23.512454 25049 net.cpp:454] relu5_2 <- conv5_2
I0625 15:09:23.512456 25049 net.cpp:397] relu5_2 -> conv5_2 (in-place)
I0625 15:09:23.512581 25049 net.cpp:150] Setting up relu5_2
I0625 15:09:23.512586 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.512598 25049 net.cpp:165] Memory required for data: 1380514668
I0625 15:09:23.512600 25049 layer_factory.hpp:77] Creating layer conv5_3
I0625 15:09:23.512609 25049 net.cpp:106] Creating Layer conv5_3
I0625 15:09:23.512622 25049 net.cpp:454] conv5_3 <- conv5_2
I0625 15:09:23.512626 25049 net.cpp:411] conv5_3 -> conv5_3
I0625 15:09:23.517488 25049 net.cpp:150] Setting up conv5_3
I0625 15:09:23.517506 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.517508 25049 net.cpp:165] Memory required for data: 1385417580
I0625 15:09:23.517515 25049 layer_factory.hpp:77] Creating layer relu5_3
I0625 15:09:23.517522 25049 net.cpp:106] Creating Layer relu5_3
I0625 15:09:23.517525 25049 net.cpp:454] relu5_3 <- conv5_3
I0625 15:09:23.517529 25049 net.cpp:397] relu5_3 -> conv5_3 (in-place)
I0625 15:09:23.517654 25049 net.cpp:150] Setting up relu5_3
I0625 15:09:23.517660 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.517662 25049 net.cpp:165] Memory required for data: 1390320492
I0625 15:09:23.517663 25049 layer_factory.hpp:77] Creating layer conv5_3_relu5_3_0_split
I0625 15:09:23.517668 25049 net.cpp:106] Creating Layer conv5_3_relu5_3_0_split
I0625 15:09:23.517669 25049 net.cpp:454] conv5_3_relu5_3_0_split <- conv5_3
I0625 15:09:23.517673 25049 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_0
I0625 15:09:23.517689 25049 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_1
I0625 15:09:23.517693 25049 net.cpp:411] conv5_3_relu5_3_0_split -> conv5_3_relu5_3_0_split_2
I0625 15:09:23.517731 25049 net.cpp:150] Setting up conv5_3_relu5_3_0_split
I0625 15:09:23.517735 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.517737 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.517740 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.517740 25049 net.cpp:165] Memory required for data: 1405029228
I0625 15:09:23.517742 25049 layer_factory.hpp:77] Creating layer rpn_conv/3x3
I0625 15:09:23.517763 25049 net.cpp:106] Creating Layer rpn_conv/3x3
I0625 15:09:23.517765 25049 net.cpp:454] rpn_conv/3x3 <- conv5_3_relu5_3_0_split_0
I0625 15:09:23.517769 25049 net.cpp:411] rpn_conv/3x3 -> rpn/output
I0625 15:09:23.568902 25049 net.cpp:150] Setting up rpn_conv/3x3
I0625 15:09:23.568919 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.568922 25049 net.cpp:165] Memory required for data: 1409932140
I0625 15:09:23.568928 25049 layer_factory.hpp:77] Creating layer rpn_relu/3x3
I0625 15:09:23.568936 25049 net.cpp:106] Creating Layer rpn_relu/3x3
I0625 15:09:23.568941 25049 net.cpp:454] rpn_relu/3x3 <- rpn/output
I0625 15:09:23.568956 25049 net.cpp:397] rpn_relu/3x3 -> rpn/output (in-place)
I0625 15:09:23.569078 25049 net.cpp:150] Setting up rpn_relu/3x3
I0625 15:09:23.569084 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.569097 25049 net.cpp:165] Memory required for data: 1414835052
I0625 15:09:23.569099 25049 layer_factory.hpp:77] Creating layer rpn/output_rpn_relu/3x3_0_split
I0625 15:09:23.569103 25049 net.cpp:106] Creating Layer rpn/output_rpn_relu/3x3_0_split
I0625 15:09:23.569106 25049 net.cpp:454] rpn/output_rpn_relu/3x3_0_split <- rpn/output
I0625 15:09:23.569111 25049 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_0
I0625 15:09:23.569118 25049 net.cpp:411] rpn/output_rpn_relu/3x3_0_split -> rpn/output_rpn_relu/3x3_0_split_1
I0625 15:09:23.569154 25049 net.cpp:150] Setting up rpn/output_rpn_relu/3x3_0_split
I0625 15:09:23.569159 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.569175 25049 net.cpp:157] Top shape: 1 512 38 63 (1225728)
I0625 15:09:23.569175 25049 net.cpp:165] Memory required for data: 1424640876
I0625 15:09:23.569177 25049 layer_factory.hpp:77] Creating layer rpn_cls_score
I0625 15:09:23.569195 25049 net.cpp:106] Creating Layer rpn_cls_score
I0625 15:09:23.569197 25049 net.cpp:454] rpn_cls_score <- rpn/output_rpn_relu/3x3_0_split_0
I0625 15:09:23.569211 25049 net.cpp:411] rpn_cls_score -> rpn_cls_score
I0625 15:09:23.570801 25049 net.cpp:150] Setting up rpn_cls_score
I0625 15:09:23.570821 25049 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 15:09:23.570823 25049 net.cpp:165] Memory required for data: 1424928156
I0625 15:09:23.570837 25049 layer_factory.hpp:77] Creating layer rpn_cls_score_rpn_cls_score_0_split
I0625 15:09:23.570842 25049 net.cpp:106] Creating Layer rpn_cls_score_rpn_cls_score_0_split
I0625 15:09:23.570843 25049 net.cpp:454] rpn_cls_score_rpn_cls_score_0_split <- rpn_cls_score
I0625 15:09:23.570848 25049 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_0
I0625 15:09:23.570853 25049 net.cpp:411] rpn_cls_score_rpn_cls_score_0_split -> rpn_cls_score_rpn_cls_score_0_split_1
I0625 15:09:23.570890 25049 net.cpp:150] Setting up rpn_cls_score_rpn_cls_score_0_split
I0625 15:09:23.570895 25049 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 15:09:23.570906 25049 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 15:09:23.570909 25049 net.cpp:165] Memory required for data: 1425502716
I0625 15:09:23.570910 25049 layer_factory.hpp:77] Creating layer rpn_bbox_pred
I0625 15:09:23.570915 25049 net.cpp:106] Creating Layer rpn_bbox_pred
I0625 15:09:23.570919 25049 net.cpp:454] rpn_bbox_pred <- rpn/output_rpn_relu/3x3_0_split_1
I0625 15:09:23.570922 25049 net.cpp:411] rpn_bbox_pred -> rpn_bbox_pred
I0625 15:09:23.572422 25049 net.cpp:150] Setting up rpn_bbox_pred
I0625 15:09:23.572429 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.572443 25049 net.cpp:165] Memory required for data: 1426077276
I0625 15:09:23.572448 25049 layer_factory.hpp:77] Creating layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 15:09:23.572463 25049 net.cpp:106] Creating Layer rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 15:09:23.572477 25049 net.cpp:454] rpn_bbox_pred_rpn_bbox_pred_0_split <- rpn_bbox_pred
I0625 15:09:23.572480 25049 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0625 15:09:23.572485 25049 net.cpp:411] rpn_bbox_pred_rpn_bbox_pred_0_split -> rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0625 15:09:23.572511 25049 net.cpp:150] Setting up rpn_bbox_pred_rpn_bbox_pred_0_split
I0625 15:09:23.572515 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.572517 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.572520 25049 net.cpp:165] Memory required for data: 1427226396
I0625 15:09:23.572521 25049 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape
I0625 15:09:23.572532 25049 net.cpp:106] Creating Layer rpn_cls_score_reshape
I0625 15:09:23.572535 25049 net.cpp:454] rpn_cls_score_reshape <- rpn_cls_score_rpn_cls_score_0_split_0
I0625 15:09:23.572540 25049 net.cpp:411] rpn_cls_score_reshape -> rpn_cls_score_reshape
I0625 15:09:23.572558 25049 net.cpp:150] Setting up rpn_cls_score_reshape
I0625 15:09:23.572562 25049 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 15:09:23.572564 25049 net.cpp:165] Memory required for data: 1427513676
I0625 15:09:23.572568 25049 layer_factory.hpp:77] Creating layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 15:09:23.572571 25049 net.cpp:106] Creating Layer rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 15:09:23.572576 25049 net.cpp:454] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split <- rpn_cls_score_reshape
I0625 15:09:23.572579 25049 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0625 15:09:23.572584 25049 net.cpp:411] rpn_cls_score_reshape_rpn_cls_score_reshape_0_split -> rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0625 15:09:23.572607 25049 net.cpp:150] Setting up rpn_cls_score_reshape_rpn_cls_score_reshape_0_split
I0625 15:09:23.572610 25049 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 15:09:23.572614 25049 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 15:09:23.572616 25049 net.cpp:165] Memory required for data: 1428088236
I0625 15:09:23.572618 25049 layer_factory.hpp:77] Creating layer rpn-data
I0625 15:09:23.573591 25049 net.cpp:106] Creating Layer rpn-data
I0625 15:09:23.573598 25049 net.cpp:454] rpn-data <- rpn_cls_score_rpn_cls_score_0_split_1
I0625 15:09:23.573603 25049 net.cpp:454] rpn-data <- gt_boxes_input-data_2_split_0
I0625 15:09:23.573607 25049 net.cpp:454] rpn-data <- im_info_input-data_1_split_0
I0625 15:09:23.573611 25049 net.cpp:454] rpn-data <- data_input-data_0_split_1
I0625 15:09:23.573616 25049 net.cpp:411] rpn-data -> rpn_labels
I0625 15:09:23.573621 25049 net.cpp:411] rpn-data -> rpn_bbox_targets
I0625 15:09:23.573626 25049 net.cpp:411] rpn-data -> rpn_bbox_inside_weights
I0625 15:09:23.573631 25049 net.cpp:411] rpn-data -> rpn_bbox_outside_weights
===================================anchor_scales in AnchorTargetLayer:=============(2, 4, 8, 16, 32)
I0625 15:09:23.574746 25049 net.cpp:150] Setting up rpn-data
I0625 15:09:23.574755 25049 net.cpp:157] Top shape: 1 1 570 63 (35910)
I0625 15:09:23.574759 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.574761 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.574764 25049 net.cpp:157] Top shape: 1 60 38 63 (143640)
I0625 15:09:23.574764 25049 net.cpp:165] Memory required for data: 1429955556
I0625 15:09:23.574766 25049 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0625 15:09:23.574772 25049 net.cpp:106] Creating Layer rpn_loss_cls
I0625 15:09:23.574775 25049 net.cpp:454] rpn_loss_cls <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_0
I0625 15:09:23.574779 25049 net.cpp:454] rpn_loss_cls <- rpn_labels
I0625 15:09:23.574781 25049 net.cpp:411] rpn_loss_cls -> rpn_cls_loss
I0625 15:09:23.574791 25049 layer_factory.hpp:77] Creating layer rpn_loss_cls
I0625 15:09:23.576169 25049 net.cpp:150] Setting up rpn_loss_cls
I0625 15:09:23.576179 25049 net.cpp:157] Top shape: (1)
I0625 15:09:23.576180 25049 net.cpp:160]     with loss weight 1
I0625 15:09:23.576189 25049 net.cpp:165] Memory required for data: 1429955560
I0625 15:09:23.576190 25049 layer_factory.hpp:77] Creating layer rpn_loss_bbox
I0625 15:09:23.576195 25049 net.cpp:106] Creating Layer rpn_loss_bbox
I0625 15:09:23.576197 25049 net.cpp:454] rpn_loss_bbox <- rpn_bbox_pred_rpn_bbox_pred_0_split_0
I0625 15:09:23.576201 25049 net.cpp:454] rpn_loss_bbox <- rpn_bbox_targets
I0625 15:09:23.576205 25049 net.cpp:454] rpn_loss_bbox <- rpn_bbox_inside_weights
I0625 15:09:23.576206 25049 net.cpp:454] rpn_loss_bbox <- rpn_bbox_outside_weights
I0625 15:09:23.576210 25049 net.cpp:411] rpn_loss_bbox -> rpn_loss_bbox
I0625 15:09:23.577389 25049 net.cpp:150] Setting up rpn_loss_bbox
I0625 15:09:23.577399 25049 net.cpp:157] Top shape: (1)
I0625 15:09:23.577411 25049 net.cpp:160]     with loss weight 1
I0625 15:09:23.577419 25049 net.cpp:165] Memory required for data: 1429955564
I0625 15:09:23.577421 25049 layer_factory.hpp:77] Creating layer rpn_cls_prob
I0625 15:09:23.577426 25049 net.cpp:106] Creating Layer rpn_cls_prob
I0625 15:09:23.577430 25049 net.cpp:454] rpn_cls_prob <- rpn_cls_score_reshape_rpn_cls_score_reshape_0_split_1
I0625 15:09:23.577433 25049 net.cpp:411] rpn_cls_prob -> rpn_cls_prob
I0625 15:09:23.577620 25049 net.cpp:150] Setting up rpn_cls_prob
I0625 15:09:23.577626 25049 net.cpp:157] Top shape: 1 2 570 63 (71820)
I0625 15:09:23.577637 25049 net.cpp:165] Memory required for data: 1430242844
I0625 15:09:23.577641 25049 layer_factory.hpp:77] Creating layer rpn_cls_prob_reshape
I0625 15:09:23.577644 25049 net.cpp:106] Creating Layer rpn_cls_prob_reshape
I0625 15:09:23.577647 25049 net.cpp:454] rpn_cls_prob_reshape <- rpn_cls_prob
I0625 15:09:23.577651 25049 net.cpp:411] rpn_cls_prob_reshape -> rpn_cls_prob_reshape
I0625 15:09:23.577677 25049 net.cpp:150] Setting up rpn_cls_prob_reshape
I0625 15:09:23.577680 25049 net.cpp:157] Top shape: 1 30 38 63 (71820)
I0625 15:09:23.577682 25049 net.cpp:165] Memory required for data: 1430530124
I0625 15:09:23.577683 25049 layer_factory.hpp:77] Creating layer proposal
I0625 15:09:23.580251 25049 net.cpp:106] Creating Layer proposal
I0625 15:09:23.580262 25049 net.cpp:454] proposal <- rpn_cls_prob_reshape
I0625 15:09:23.580266 25049 net.cpp:454] proposal <- rpn_bbox_pred_rpn_bbox_pred_0_split_1
I0625 15:09:23.580269 25049 net.cpp:454] proposal <- im_info_input-data_1_split_1
I0625 15:09:23.580273 25049 net.cpp:411] proposal -> rpn_rois
=================================anchor_scales in ProposalLayer:=============(2, 4, 8, 16, 32)
I0625 15:09:23.581970 25049 net.cpp:150] Setting up proposal
I0625 15:09:23.581991 25049 net.cpp:157] Top shape: 1 5 (5)
I0625 15:09:23.581995 25049 net.cpp:165] Memory required for data: 1430530144
I0625 15:09:23.581997 25049 layer_factory.hpp:77] Creating layer roi-data
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/rpn/proposal_target_layer.py", line 99
    roi_mask_kl = -1 * np.ones((roi_mask.shape[0], roi_mask.shape[1], cfg.TRAIN.CLASS_NUM + 1), dtype=np.float32)
    ^
IndentationError: unexpected indent
Traceback (most recent call last):
  File "./tools/train_net.py", line 116, in <module>
    max_iters=args.max_iters)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 168, in train_net
    pretrained_model=pretrained_model)
  File "/home/fujenchu/projects/affordanceContext/affordance-net/tools/../lib/fast_rcnn/train.py", line 52, in __init__
    self.solver = caffe.SGDSolver(solver_prototxt)
SystemError: NULL result without error in PyObject_Call
